(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{486:function(a,t,r){"use strict";r.r(t);var e=r(26),v=Object(e.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"javascript"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[a._v("#")]),a._v(" JavaScript")]),a._v(" "),r("h2",{attrs:{id:"语法和数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#语法和数据类型"}},[a._v("#")]),a._v(" 语法和数据类型")]),a._v(" "),r("p",[a._v("借鉴了 java 的大部分语法，JavaScript 是区分大小写的，并使用 Unicode 字符集。")]),a._v(" "),r("h3",{attrs:{id:"注释"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[a._v("#")]),a._v(" 注释")]),a._v(" "),r("p",[a._v("分为单行注释和多行注释，但是不能嵌套注释，在代码执行过程中，注释将被自动跳过（不执行）。")]),a._v(" "),r("h3",{attrs:{id:"声明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#声明"}},[a._v("#")]),a._v(" 声明")]),a._v(" "),r("p",[a._v("JavaScript 有三种声明方式。")]),a._v(" "),r("h4",{attrs:{id:"var"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#var"}},[a._v("#")]),a._v(" var")]),a._v(" "),r("p",[a._v("​ 声明一个变量，可选初始化一个值")]),a._v(" "),r("h4",{attrs:{id:"let"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#let"}},[a._v("#")]),a._v(" let")]),a._v(" "),r("p",[a._v("​ 声明一个块作用域的局部变量，可选初始化一个值")]),a._v(" "),r("h4",{attrs:{id:"const"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[a._v("#")]),a._v(" const")]),a._v(" "),r("p",[a._v("​ 声明一个块作用域的只读常量。")]),a._v(" "),r("h3",{attrs:{id:"变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),r("p",[a._v("在应用程序中，使用变量作为值得符号名。变量的名字又叫做标识符，遵守一定的规则。")]),a._v(" "),r("p",[a._v("一个 JavaScript 标识符必须以字母、下划线（_）或者美元符号（$）开头；后续的字符也可以是数字（0-9）。因为 JavaScript 语言是区分大小写的，所以字母可以是从 A 到 Z 的大写字母和从 a 到 z 的小写字母。")]),a._v(" "),r("h3",{attrs:{id:"声明变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#声明变量"}},[a._v("#")]),a._v(" 声明变量")]),a._v(" "),r("h3",{attrs:{id:"变量求值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#变量求值"}},[a._v("#")]),a._v(" 变量求值")]),a._v(" "),r("p",[a._v("用 var 或 let 语句声明的变量，如果没有赋初始值，则其值为 undefined。")]),a._v(" "),r("p",[a._v("如果访问一个未声明的变量会导致抛出一个引用错误（ReferenceError）异常。")]),a._v(" "),r("p",[a._v("你可以使用 undefined 来判断一个变量是否已赋值。")]),a._v(" "),r("p",[a._v("数值类型环境中 undefined 值会被转换为 NaN。")]),a._v(" "),r("p",[a._v("当对一个 null 变量求值时，空值 null 在数值环境中会被当作 0 来对待，而在布尔类型环境中会被当作 false。")]),a._v(" "),r("h3",{attrs:{id:"变量的作用域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#变量的作用域"}},[a._v("#")]),a._v(" 变量的作用域")]),a._v(" "),r("p",[a._v("在函数之外声明的变量，叫做全局变量，因为它可被当前文档中的任何其他代码所访问。在函数内部声明的变量，叫做局部变量，因为它只能在当前函数的内部访问。")]),a._v(" "),r("p",[a._v("ECMAScript6 之前 JavaScript 没有语句块作用域，相反，语句块中声明的变量将成为语句块所在函数（或全局作用域）的局部变量。")]),a._v(" "),r("h3",{attrs:{id:"变量提升"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#变量提升"}},[a._v("#")]),a._v(" 变量提升")]),a._v(" "),r("p",[a._v("JavaScript 变量的另一个不同寻常的地方是，你可以先使用变量稍后再声明变量而不会引发异常。这一概念称为变量提升；JavaScript 变量感觉上是被“提升”或移到了函数或语句的最前面。但是，提升后的变量将返回 undefined 值。因此在使用或引用某个变量之后进行声明和初始化操作，这个被提升的变量仍将返回 undefined 值。")]),a._v(" "),r("p",[a._v("由于存在变量提升，一个函数中所有的 var 语句应尽可能地放在接近函数顶部的地方，这个习惯将大大提升代码的清晰度。")]),a._v(" "),r("p",[a._v("在 ECMAScript6 中，let（const）同样会被提升到代码块的顶部但是不会被赋予初始值。在变量声明之前引用这个变量，将抛出引用错误（ReferenceError）。这个变量将从代码块一开始的时候就处在一个“暂时性死区”，直到这个变量被声明为止。")]),a._v(" "),r("h3",{attrs:{id:"函数提升"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数提升"}},[a._v("#")]),a._v(" 函数提升")]),a._v(" "),r("p",[a._v("对于函数来说，只有函数声明会被提升到顶部，而函数表示不会被提升。")]),a._v(" "),r("h3",{attrs:{id:"全局变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#全局变量"}},[a._v("#")]),a._v(" 全局变量")]),a._v(" "),r("p",[a._v("全局变量是全局对象的属性，在网页中，全局对象是 window，所以你可以用形如 window.variable 的语法来设置和访问全局变量。")]),a._v(" "),r("h3",{attrs:{id:"常量-constants"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常量-constants"}},[a._v("#")]),a._v(" 常量（Constants）")]),a._v(" "),r("p",[a._v("你可以用关键字 const 创建一个只读的常量，命名规则和变量相同。")]),a._v(" "),r("p",[a._v("常量不可以通过重新赋值改变其值，也不可以在代码运行时重新声明。它必须被初始化为某个值。")]),a._v(" "),r("p",[a._v("常量的作用域规则与 let 块级作用域变量相同。若省略 const 关键字，则该标识符将被视为变量。")]),a._v(" "),r("p",[a._v("在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量。")]),a._v(" "),r("p",[a._v("对象属性被赋值为常量是不受保护的，同样数组的被定义为常绿也是不受保护的。")]),a._v(" "),r("h3",{attrs:{id:"字面量-literals"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字面量-literals"}},[a._v("#")]),a._v(" 字面量（Literals）")]),a._v(" "),r("p",[a._v("字面量是由语法表达式定义的常量，或通过由一定字词组成的语词表达式定义的常量，字面量是常量，其值是固定的，而且在程序脚本运行中不可更改。")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E6%95%B0%E7%BB%84%E5%AD%97%E9%9D%A2%E9%87%8F(array_literals)",target:"_blank",rel:"noopener noreferrer"}},[a._v("数组字面量(Array literals)"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%B8%83%E5%B0%94%E5%AD%97%E9%9D%A2%E9%87%8F(boolean_literals)",target:"_blank",rel:"noopener noreferrer"}},[a._v("布尔字面量(Boolean literals)"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E6%B5%AE%E7%82%B9%E6%95%B0%E5%AD%97%E9%9D%A2%E9%87%8F(floating-point_literals)",target:"_blank",rel:"noopener noreferrer"}},[a._v("浮点数字面量(Floating-point literals)"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E6%95%B4%E6%95%B0(integers)",target:"_blank",rel:"noopener noreferrer"}},[a._v("整数(Integers)"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F(object_literals)",target:"_blank",rel:"noopener noreferrer"}},[a._v("对象字面量(Object literals)"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#regexp_literals",target:"_blank",rel:"noopener noreferrer"}},[a._v("RegExp literals"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E9%87%8F(string_literals)",target:"_blank",rel:"noopener noreferrer"}},[a._v("字符串字面量(String literals)"),r("OutboundLink")],1)])]),a._v(" "),r("h3",{attrs:{id:"转义字符"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#转义字符"}},[a._v("#")]),a._v(" 转义字符")]),a._v(" "),r("p",[a._v("通过在引用号前加反斜线“\\”,可以在字符串中插入引号，这就是引号转义。")]),a._v(" "),r("h3",{attrs:{id:"数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[a._v("#")]),a._v(" 数据类型")]),a._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[a._v("最新的ECMAScript标准定义了"),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v("种数据类型。\n有七种基本数据类型，分别为：\nBoolean"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("undefined")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("Number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("String"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("Symbol"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("BigInt\n和一种复杂数据类型\nObject\n")])])]),r("h3",{attrs:{id:"判断数据类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#判断数据类型"}},[a._v("#")]),a._v(" 判断数据类型")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("typeof，instanceof，Object.prototype.toString.call()\ntypeof：基本数据类型和function，object和null\ninstanceof：用来判断对象是不是某个构造函数的实例，会沿着原型链找\nObject.prototype.toString.call()：无敌\n")])])]),r("h3",{attrs:{id:"数据类型转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换"}},[a._v("#")]),a._v(" 数据类型转换")]),a._v(" "),r("p",[a._v("​ JavaScript 是一种动态类型语言(dynamically typed language)。这意味着你在声明变量时可以不必指定数据类型，而数据类型会在代码执行时会根据需要自动转换。")]),a._v(" "),r("p",[a._v("字符串转数字")]),a._v(" "),r("p",[a._v("parseInt()和 parseFloat(),一元加法运算符。")]),a._v(" "),r("h2",{attrs:{id:"流程控制与错误处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#流程控制与错误处理"}},[a._v("#")]),a._v(" 流程控制与错误处理")]),a._v(" "),r("h3",{attrs:{id:"语句块"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#语句块"}},[a._v("#")]),a._v(" 语句块")]),a._v(" "),r("p",[a._v("最基本的语句是用于组合语句的语句块。该块由一对大括号界定。")]),a._v(" "),r("p",[a._v("语句块通常用于流程控制，如 if，for，while 等等。")]),a._v(" "),r("h3",{attrs:{id:"条件判断语句"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#条件判断语句"}},[a._v("#")]),a._v(" 条件判断语句")]),a._v(" "),r("p",[a._v("条件判断语句指的是根据指定的条件所返回的结果（真或假或其它预定义的），来执行特定的语句。JavaScript 支持两种条件判断语句：if...else 和 switch。")]),a._v(" "),r("h3",{attrs:{id:"异常处理语句"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异常处理语句"}},[a._v("#")]),a._v(" 异常处理语句")]),a._v(" "),r("p",[a._v("你可以用 throw 语句抛出一个异常并且用 try...catch 语句捕获处理它。")]),a._v(" "),r("ul",[r("li",[a._v("throw 语句")]),a._v(" "),r("li",[a._v("try...catch 语句")])]),a._v(" "),r("h3",{attrs:{id:"异常类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异常类型"}},[a._v("#")]),a._v(" "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#%E5%BC%82%E5%B8%B8%E7%B1%BB%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[a._v("异常类型"),r("OutboundLink")],1)]),a._v(" "),r("p",[a._v("JavaScript 可以抛出任意对象。然而，不是所有对象能产生相同的结果。尽管抛出数值或者字母串作为错误信息十分常见，但是通常用下列其中一种异常类型来创建目标更为高效：")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types",target:"_blank",rel:"noopener noreferrer"}},[a._v("ECMAScript exceptions"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMException",target:"_blank",rel:"noopener noreferrer"}},[r("code",[a._v("DOMException")]),r("OutboundLink")],1),a._v(" and "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/DOMError",target:"_blank",rel:"noopener noreferrer"}},[r("code",[a._v("DOMError")]),r("OutboundLink")],1)])]),a._v(" "),r("h2",{attrs:{id:"循环与迭代"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#循环与迭代"}},[a._v("#")]),a._v(" 循环与迭代")]),a._v(" "),r("p",[a._v("循环提供了一种快速和简单的方式去做一些重复的事。")]),a._v(" "),r("p",[a._v("循环有很多种类，但本质上它们都做得同一件事：他们把一个动作重复了很多次（实际上重复得次数有可能为 0）。各种循环机制提供了不同的方法去确定循环得开始和结束。不同情况下，某一种类型循环会比其它得循环用起来更简单。")]),a._v(" "),r("p",[a._v("JavaScript 中提供了这些循环语句：")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#for_%E8%AF%AD%E5%8F%A5",target:"_blank",rel:"noopener noreferrer"}},[a._v("for 语句"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#do...while_%E8%AF%AD%E5%8F%A5",target:"_blank",rel:"noopener noreferrer"}},[a._v("do...while 语句"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#while_%E8%AF%AD%E5%8F%A5",target:"_blank",rel:"noopener noreferrer"}},[a._v("while 语句"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#labeled_%E8%AF%AD%E5%8F%A5",target:"_blank",rel:"noopener noreferrer"}},[a._v("labeled 语句"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#break_%E8%AF%AD%E5%8F%A5",target:"_blank",rel:"noopener noreferrer"}},[a._v("break 语句"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#continue_%E8%AF%AD%E5%8F%A5",target:"_blank",rel:"noopener noreferrer"}},[a._v("continue 语句"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#for...in_%E8%AF%AD%E5%8F%A5",target:"_blank",rel:"noopener noreferrer"}},[a._v("for...in 语句"),r("OutboundLink")],1)]),a._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration#for...of_%E8%AF%AD%E5%8F%A5",target:"_blank",rel:"noopener noreferrer"}},[a._v("for...of 语句"),r("OutboundLink")],1)])]),a._v(" "),r("h2",{attrs:{id:"函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[a._v("#")]),a._v(" 函数")]),a._v(" "),r("p",[a._v("函数是 JavaScript 中的基本组件之一。一个函数是 JavaScript 过程—一组执行任务或计算值的语句。要使用一个函数，你必须将其定义在你希望调用它的作用域内。")]),a._v(" "),r("p",[a._v("一个 JavaScript 函数用 function 关键字定义，后面跟着函数名和圆括号。")]),a._v(" "),r("h2",{attrs:{id:"定义函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定义函数"}},[a._v("#")]),a._v(" 定义函数")]),a._v(" "),r("h3",{attrs:{id:"函数声明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[a._v("#")]),a._v(" 函数声明")]),a._v(" "),r("p",[a._v("一个函数定义（也称为函数声明，或函数语句）有一些列的 function 关键字组成，依次为：")]),a._v(" "),r("ul",[r("li",[a._v("函数的名称")]),a._v(" "),r("li",[a._v("函数参数列表，包围在括号中并由逗号分隔。")]),a._v(" "),r("li",[a._v("定义函数的 JavaScript 语句，用大括号{}括起来。")])]),a._v(" "),r("h3",{attrs:{id:"函数表达式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数表达式"}},[a._v("#")]),a._v(" 函数表达式")]),a._v(" "),r("p",[a._v("虽然函数声明在语法上是一个语句，但函数也可以由函数表达式创建。这样的函数可以是匿名的；它不必有一个名称，然而，函数表达式也可以提供函数名，并且可以用于在函数内部代指其本身，或者在调试器堆栈跟踪识别该函数。")]),a._v(" "),r("h3",{attrs:{id:"调用函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#调用函数"}},[a._v("#")]),a._v(" 调用函数")]),a._v(" "),r("p",[a._v("定义一个函数并不会自动地执行它。定义了函数仅仅是赋予函数以名称并明确函数被调用时该做些什么。调用函数才会以给定的参数真正执行这些动作。")]),a._v(" "),r("p",[a._v("函数一定要处于调用它们的域中，但是函数的声明可以被提升（出现在调用语句之后）。")]),a._v(" "),r("p",[a._v("函数域是指函数声明时的所在的地方，或者函数在顶层被声明时，指整个程序。")]),a._v(" "),r("p",[a._v("函数可以被递归，就是说函数可以调用其本身。")]),a._v(" "),r("p",[a._v("还有其他的方式来调用函数。常见的一些清醒是某些地方需要动态调用函数，或者函数的实参数量是变化的，或者调用函数的上下文需要指定为在运行时确定的特定对象。显然，函数本身就是对象，因为这些对象也有方法。apply（）")]),a._v(" "),r("h3",{attrs:{id:"函数作用域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域"}},[a._v("#")]),a._v(" 函数作用域")]),a._v(" "),r("p",[a._v("在函数内定义的变量不能再函数之外的任何地方访问，因为变量仅仅在该函数的域的内部有定义。相对应的，一个函数可以访问定义在其范围内的任何变量和函数。换言之，定义在全局域中的函数可以访问所有定义在全局域中的变量。在另一个函数中定义的函数也可以访问在其父函数中定义的所有变量和父函数有权访问的任何其他变量。")]),a._v(" "),r("h2",{attrs:{id:"作用域和函数堆栈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#作用域和函数堆栈"}},[a._v("#")]),a._v(" 作用域和函数堆栈")]),a._v(" "),r("h3",{attrs:{id:"递归"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[a._v("#")]),a._v(" 递归")]),a._v(" "),r("p",[a._v("一个函数可以指向并调用自身，有三种方法可以达到这个目的：")]),a._v(" "),r("ol",[r("li",[a._v("函数名")]),a._v(" "),r("li",[a._v("arguments.callee")]),a._v(" "),r("li",[a._v("作用域下的一个指向该函数的变量名")])]),a._v(" "),r("p",[a._v("调用自身的函数我们称之为递归函数。在某种意义上说，递归近似于循环。两者都重复执行相同的代码，并且两者都需要一个终止条件（避免无限循环或者无限递归）。")]),a._v(" "),r("h3",{attrs:{id:"嵌套函数和闭包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#嵌套函数和闭包"}},[a._v("#")]),a._v(" 嵌套函数和闭包")]),a._v(" "),r("p",[a._v("你可以在一个函数里面嵌套另外一个函数。嵌套（内部）函数对其容器（外部）函数是私有的。它自身也形成了一个闭包。一个闭包是一个可以自己拥有独立的环境与变量的表达式（通常是函数）。")]),a._v(" "),r("p",[a._v("既然嵌套函数是一个闭包，就意味着一个嵌套函数可以“继承”容器函数的参数和变量。换句话说，内部函数包含外部函数的作用域。")]),a._v(" "),r("ul",[r("li",[a._v("内部函数只可以在外部函数中访问")]),a._v(" "),r("li",[a._v("内部函数形成了一个闭包：它可以访问外部函数的参数和变量，但是外部函数却不能使用它的参数和变量。")])]),a._v(" "),r("p",[a._v("由于内部函数形成了闭包，因此你可以调用外部函数并为外部函数和内部函数指定参数")]),a._v(" "),r("h3",{attrs:{id:"保存变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#保存变量"}},[a._v("#")]),a._v(" 保存变量")]),a._v(" "),r("p",[a._v("一个闭包必须保存它可见作用域中所有参数和变量。因为每一次调用传入的参数都可能不同，每一次对外部函数的调用实际上重新创建了一遍这个闭包。只有当返回的 inside 没有再被引用时，内存才会被释放。")]),a._v(" "),r("h3",{attrs:{id:"多层嵌套函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多层嵌套函数"}},[a._v("#")]),a._v(" 多层嵌套函数")]),a._v(" "),r("p",[a._v("函数可以被多层嵌套。例如，函数 A 可以包含函数 B，函数 B 可以再包含函数 C。B 和 C 都形成了闭包，所以 B 可以访问 A，C 可以访问 B 和 A。因此，闭包可以包含多个作用域；他们递归式的包含了所有包含它的函数作用域。这个称之为作用域链。")]),a._v(" "),r("h3",{attrs:{id:"命名冲突"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#命名冲突"}},[a._v("#")]),a._v(" 命名冲突")]),a._v(" "),r("p",[a._v("当同一个闭包作用域下两个参数或者变量同名时，就会产生命名冲突。更近的作用域有更高的优先权，所以最近的优先级最高，最远的优先级最低。这就是作用域链。链的第一个元素就是最里面的作用域，最后一个元素便是最外层的作用域。")]),a._v(" "),r("h2",{attrs:{id:"闭包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[a._v("#")]),a._v(" 闭包")]),a._v(" "),r("p",[a._v("闭包是 JavaScript 中最强大的特性之一。JavaScript 允许函数嵌套，并且内部函数可以访问定义在外部函数中的所有变量和函数，以及外部函数能访问的所有变量和函数。")]),a._v(" "),r("p",[a._v("但是外部函数却不能狗访问定义在内部函数中的变量和函数。这给内部函数的变量提供了一定的安全性。")]),a._v(" "),r("p",[a._v("此外，由于内部函数可以访问外部函数的作用域，因此当内部函数生存周期大于外部函数时，外部函数中定义的变量和函数的生存周期将比内部函数执行时间长。当内部函数以某一种方式被任何一个外部函数作用域访问时，一个闭包就产生了。")]),a._v(" "),r("h3",{attrs:{id:"使用-arguments-对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用-arguments-对象"}},[a._v("#")]),a._v(" 使用 arguments 对象")]),a._v(" "),r("p",[a._v("函数的实际参数会被保存在一个类似数组的 arguments 对象中。在函数内，你可以按如下方式找出传入的参数：")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arguments[i]\n")])])]),r("p",[a._v("其中 i 是参数的序数编号（数组索引），以 0 开始。所以第一个传来的参数会是 arguments[0]。参数的数量是由 arguments.length 表示。")]),a._v(" "),r("p",[a._v("使用 arguments 对象，你可以处理比声明的更多的参数来调用函数。这在你事先不知道会需要将多少个参数递给函数时十分有用。你可以用 arguments.length 来获得实际传递给函数的参数的数量，然后用 arguments 对象来取得每个参数。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("arguments变量只是“类数组对象”，并不是一个数组。称其为类数组对象是说它有一个索引编号和length属性。尽管如此，它并不拥有全部的Array对象的操作方法。\n")])])]),r("h2",{attrs:{id:"函数参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[a._v("#")]),a._v(" 函数参数")]),a._v(" "),r("p",[a._v("从 ECMAScript6 开始，有两个新的类型的参数：默认参数，剩余参数。")]),a._v(" "),r("h3",{attrs:{id:"默认参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#默认参数"}},[a._v("#")]),a._v(" 默认参数")]),a._v(" "),r("p",[a._v("在 JavaScript 中，函数参数的默认值是 undefined。然而，在某些情况下设置不同的默认值是有用的。这时默认参数可以提供帮助。")]),a._v(" "),r("p",[a._v("在过去，用于设定默认参数的一般策略是在函数的主体中测试参数值是否为 undefined")]),a._v(" "),r("p",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions",target:"_blank",rel:"noopener noreferrer"}},[a._v("web"),r("OutboundLink")],1)]),a._v(" "),r("ul",[r("li",[a._v("数组 API")]),a._v(" "),r("li",[a._v("字符串 API")]),a._v(" "),r("li",[a._v("类型转换机制")]),a._v(" "),r("li",[a._v("==与===")]),a._v(" "),r("li",[a._v("深/浅拷贝")]),a._v(" "),r("li",[a._v("闭包")]),a._v(" "),r("li",[a._v("原型、原型链、特点")]),a._v(" "),r("li",[a._v("继承")]),a._v(" "),r("li",[a._v("this")]),a._v(" "),r("li",[a._v("执行上下文和执行栈")]),a._v(" "),r("li",[a._v("事件模型")]),a._v(" "),r("li",[a._v("事件冒泡、事件捕获")]),a._v(" "),r("li",[a._v("typeof 与 instanceof")]),a._v(" "),r("li",[a._v("时间代理")]),a._v(" "),r("li",[a._v("new")]),a._v(" "),r("li",[a._v("ajax 原理，实现")]),a._v(" "),r("li",[a._v("bind、call、apply 区别")]),a._v(" "),r("li",[a._v("事件循环")]),a._v(" "),r("li",[a._v("正则表达式")]),a._v(" "),r("li",[a._v("DOM")]),a._v(" "),r("li",[a._v("BOM")]),a._v(" "),r("li",[a._v("尾递归")]),a._v(" "),r("li",[a._v("内存泄漏")]),a._v(" "),r("li",[a._v("本地存储")]),a._v(" "),r("li",[a._v("函数式编程，优缺点")]),a._v(" "),r("li",[a._v("函数缓存")]),a._v(" "),r("li",[a._v("精度丢失")]),a._v(" "),r("li",[a._v("节流、防抖")]),a._v(" "),r("li",[a._v("一个元素是否在可视区域")]),a._v(" "),r("li",[a._v("上拉加载、下拉刷新")]),a._v(" "),r("li",[a._v("断点续传")]),a._v(" "),r("li",[a._v("单点登录")]),a._v(" "),r("li",[a._v("web 攻击")]),a._v(" "),r("li",[a._v("类名查找")]),a._v(" "),r("li",[a._v("声明式与命令式")]),a._v(" "),r("li",[a._v("函数式编程中纯函数")]),a._v(" "),r("li",[a._v("函数式编程中柯里化")]),a._v(" "),r("li",[a._v("函数式编程中代码组合")]),a._v(" "),r("li",[a._v("前端性能监控数据")]),a._v(" "),r("li",[a._v("H5 与客户端交互的方式")]),a._v(" "),r("li",[a._v("前端缓存")]),a._v(" "),r("li",[a._v("模块化")]),a._v(" "),r("li",[a._v("攻击手段，防范")])])])}),[],!1,null,null,null);t.default=v.exports}}]);