(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{530:function(t,e,a){"use strict";a.r(e);var n=a(26),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"计算属性、侦听器和过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算属性、侦听器和过滤器"}},[t._v("#")]),t._v(" 计算属性、侦听器和过滤器")]),t._v(" "),a("p",[t._v("在Vue中，可以很方便地将数据使用插值表达式的方式渲染到页面元素中，但是插值表达式的设计初衷是用于简化运算，不应该对插值做过多的操作。当需要对插值做进一步的处理时，就应该使用Vue中的计算属性来完成这一操作。同时，当插值数据变化时，执行异步或开销较大的操作时，可以通过采用监听器的方式来达到目的。")]),t._v(" "),a("h3",{attrs:{id:"计算属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算属性"}},[t._v("#")]),t._v(" 计算属性")]),t._v(" "),a("p",[t._v("计算属性在computed选项中定义。计算属性就是当其依赖属性的值发生变化时，这个属性的值会自动更新，与之相关的DOM也会同步更新。这里的依赖属性值是data中定义的属性。")]),t._v(" "),a("h3",{attrs:{id:"计算属性与方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算属性与方法"}},[t._v("#")]),t._v(" 计算属性与方法")]),t._v(" "),a("p",[t._v("计算属性的写法和方法相似，完全可以在methods中定义一个方法来实现相同的功能。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<div id=\"app\">\n\t输入内容：<input type=\"text\" v-model=\"message\">\n\t<br/>\n\t反转内容：{{reversedMessage()}}\n</div>\n<script>\nnew Vue({\n\tel:'#app',\n\tdata:{\n\t\tmessage:''\n\t},\n\t//方法\n\tmethods:{\n\t\treversedMessage:function(){\n\t\t\treturn this.message.split('').reverse().joim('')\n\t\t}\n\t}\n})\n<\/script>\n")])])]),a("p",[t._v("在IE11浏览器里面运行效果与之前是完全一样的。")]),t._v(" "),a("p",[t._v("其实，计算属性的本质就是一个方法，只不过在使用计算属性的时候，把计算属性的名称直接作为属性来使用，并不会把计算属性作为一个方法来调用。")]),t._v(" "),a("p",[t._v("为什么还要去使用计算属性而不是去定义一个方法呢？计算属性是基于它们的依赖进行缓存的，即只有在相关依赖发生改变时它们才会重新求值。例如，只要message没有发生改变，多次访问reversedMessage计算属性会立即返回之前的计算结果，而不必再次执行函数。")]),t._v(" "),a("p",[t._v("反之，如果使用方法的形式实现，当使用到reversedMessage方法时，无论message属性是否发生改变，方法都会重新执行一次，这无形中增加了系统的开销。")]),t._v(" "),a("p",[t._v("在某些情况下，计算属性和方法实现相同的功能，但有一个重要的不同点：在调用methods中的一个方法时，所有方法都会被调用")]),t._v(" "),a("p",[t._v("计算属性相比较于方法更加优化，但并不是什么情况下都使用计算属性，在触发事件时还是使用对应的方法。计算属性一般在数据量比较大、比较耗时的情况下使用（例如搜索），只有虚拟DOM与真实DOM不同的情况下才会执行computed")]),t._v(" "),a("h3",{attrs:{id:"侦听属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#侦听属性"}},[t._v("#")]),t._v(" 侦听属性")]),t._v(" "),a("p",[t._v("在Vue中，不光可以使用计算属性的方式来监听数据的变化，还可以使用watch监听器的方法来检测某个数据发生的变化。不同的是，计算属性仅仅是对于依赖数据的变化后进行的数据操作，而watch更加侧重于对于监测中的某个数据发生变化后所执行的一系列的功能逻辑操作。")]),t._v(" "),a("p",[t._v("监听器以key-value的形式定义，key是一个字符串，它是需要被检测的对象，而value则可以是字符串（方法的名称）、函数（可以获取到监听对象改变前的值以及更新后的值）或是一个对象（对象内可以包含回调函数的其他选项，例如是否初始化时执行监听，或是否执行深度遍历，即是否对对象内部的属性进行监听）。")]),t._v(" "),a("h4",{attrs:{id:"回调值为函数方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调值为函数方法"}},[t._v("#")]),t._v(" 回调值为函数方法")]),t._v(" "),a("p",[t._v("回调方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('new Value({\n\tdata:{\n\t\tmessage:\'\'\n\t},\n\twatch:function(newValue,oldValue){\n\t\tconsole.log("新值："+newValue+"--旧值"+oldValue)\n\t}\n})\n')])])]),a("p",[t._v("指明回调为已经定义好的方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("new Value({\n\tdata:{\n\t\tmessage:''\n\t},\n\twatch:{\n\t\t//调用方法\n\t\tmessage:'way'\n\t},\n\t//定义好的方法\n\tmethods:{\n\t\tway:function(newValue,oldValue){\n\t\t\tconsole.log(\"新值：\"+newValue+\"--旧值\"+oldValue)\n\t\t}\n\t}\n})\n")])])]),a("h4",{attrs:{id:"回调值为对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调值为对象"}},[t._v("#")]),t._v(" 回调值为对象")]),t._v(" "),a("p",[t._v("当我们监听的回调值为一个对象时，不仅可以设置回调函数，还可以设置一些回调的属性。例如，在下面的例子中，监听了User这个对象，同时执行深度遍历，这时监听到User.name属性发生改变的时候，就可以执行回调函数。注意，深度遍历默认为false，当不启用深度遍历时，是无法监听到对象的内部属性的变化的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("new Value({\n\tdata:{\n\t\tmessage:'',\n\t\tUser:{\n\t\t\tname:'mayun'\n\t\t}\n\t},\n\twatch:{\n\t\t'User':{\n\t\t\thandler:function(newValue,oldValue){\n\t\t\t\tconsole.log(\"对象记录：新值：\"+newValue.name+\"---旧值:\"+oldValue.name)\n\t\t\t},\n\t\t\tdeep:true\n\t\t}\n\t}\n})\n")])])]),a("p",[t._v("newValue与oldValue一样。当监听的数据为对象或数组时，newValue和oldValue是相等的，因为对象和数组都为引用类型，这两个的形参指向的也是同一个数组对象。同时，如果不启用深度遍历，将无法监听到对于User对象中name属性的变化。")]),t._v(" "),a("p",[t._v("从前面内容可以总结：计算属性的结果会被缓存起来，只有依赖的属性发生变化时才会重新计算，必须返回一个数据，主要用来进行纯数据的操作。监听器主要用来监听某个数据的变化，从而去执行某些具体的回调业务逻辑，不仅仅局限于返回数据。")]),t._v(" "),a("h3",{attrs:{id:"过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[t._v("#")]),t._v(" 过滤器")]),t._v(" "),a("p",[t._v("过滤器可对数据进行筛选、过滤、格式化，例如时间格式化、英文大小写转换、状态转换，等等。它与methods、computed和watch不同的是，其不能改变原始值。")]),t._v(" "),a("p",[t._v("Vue允许自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和v-bind表达式。过滤器应该被添加在JavaScript表达式的尾部，由“管道”符号指示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\x3c!-- 在双花括号中 --\x3e\n{{ message | capitalize}}\n\x3c!-- 在v-bind中 --\x3e\n<div v-bind:id=\"rawId | formatId\"></div>\n\n//可以在一个组件的选项中定义本地的过滤器：\n\nfilter:{\n\tcapitalize:function(value){\n\t\tif(!value) return ''\n\t\tvalue = value.toString()\n\t\treturn value.charAt(0).toUpperCase()+value.slice(1)\n\t}\n}\n\n//或者在创建Vue实例之前全局定义过滤器：\nVue.filter('capitalize',function(value){\n\t\tif(!value) return ''\n\t\tvalue = value.toString()\n\t\treturn value.charAt(0).toUpperCase()+value.slice(1)\n\t})\n\tnew Vue({\n\t\t//...\n\t})\n")])])]),a("p",[t._v("当全局过滤器和局部过滤器重名时，会采用局部过滤器。")])])}),[],!1,null,null,null);e.default=s.exports}}]);