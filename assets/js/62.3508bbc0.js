(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{445:function(s,t,n){"use strict";n.r(t);var a=n(26),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"github-action"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#github-action"}},[s._v("#")]),s._v(" Github Action")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("husky")])]),s._v(" "),n("li",[n("p",[s._v("代码规范")]),s._v(" "),n("ul",[n("li",[s._v("ESLint")]),s._v(" "),n("li",[s._v("esditorconfig")])])]),s._v(" "),n("li",[n("p",[s._v("commit 提交规范")])])]),s._v(" "),n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),n("h3",{attrs:{id:"为什么使用-github-actions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用-github-actions"}},[s._v("#")]),s._v(" 为什么使用 Github Actions")]),s._v(" "),n("p",[s._v("前端部署一般是将打包后的代码放到 nginx html 目录就可以了，每次修改文件，我们都需要重新打包，登陆服务器，上传代码，重启服务器。Github Actions 就可以帮我们做这一系列的操作。")]),s._v(" "),n("h3",{attrs:{id:"github-actions-是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#github-actions-是什么"}},[s._v("#")]),s._v(" Github Actions 是什么")]),s._v(" "),n("p",[s._v("持续集成由很多操作组成，比如拉去最新代码，运行测试，登陆服务器、部署服务器等，")]),s._v(" "),n("p",[s._v("一般开发流程是：需求=>开发=>构建=>测试=>预发=>部署，这些操作是可重复利用的，Github 集成了 actions 市场，允许开发者把操作写成独立的脚本，发布到 Actions 市场允许所有开发者使用。")]),s._v(" "),n("p",[s._v("Github 给我们提供了一个以下配置的服务器来允许我们配置对应的 actions:")]),s._v(" "),n("ul",[n("li",[s._v("2-core CPU")]),s._v(" "),n("li",[s._v("7GB of RAM memory")]),s._v(" "),n("li",[s._v("14GB of SSD disk space")])]),s._v(" "),n("p",[s._v("如果你有网络时延 的需求（比如推送及拉取镜像时产生的网络时延），可以自建服务器")]),s._v(" "),n("h3",{attrs:{id:"基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[s._v("#")]),s._v(" 基本概念")]),s._v(" "),n("p",[s._v("workflow(流程)：持续集成一次运行的过程，就是一个 workflow。")]),s._v(" "),n("p",[s._v("job(任务)：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。")]),s._v(" "),n("p",[s._v("step(步骤)：每个 job 由多个 step 构成，一步步完成。")]),s._v(" "),n("p",[s._v("action(动作)：每个 step 可以依次执行一个或多个命令（action）。")]),s._v(" "),n("p",[s._v("创建 workflow 文件，在项目的./github/workflows 目录，创建一个 workflow 文件，例如 ci.yml。")]),s._v(" "),n("div",{staticClass:"language-YAML extra-class"},[n("pre",{pre:!0,attrs:{class:"language-yaml"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# workflow名称。省略的话，默认为当前workflow文件名")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Node.js CI\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 触发workflow的条件，")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只有master分支发生push事件时，才会触发workflow")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("branches")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" master "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("pull_request")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("branches")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" master "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# jobs表示执行的一项或多项任务")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("jobs")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 任务的job_id，具体名称自定义，这里build代表打包")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("build")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# # runs-on字段指定运行所需要的虚拟机环境。注意：这个是必填字段，有[ubuntu | windows | macos]-latest三种")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("runs-on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ubuntu"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("latest\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 用于配置当前workflow的参数")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("strategy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("matrix")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# node-version指定node版本，有三种配置方式，可以指定多个版本都运行，也可以指定单个版本下运行")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 使用三个node版本，'x'是一个通配符")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# node-version: [8.x, 10.x, 12.x]")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 可以写具体的版本好")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# node-version: [8.11.2, 14.16.0]")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3. 单个版本号")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# node-version: '12.x'")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果不指定node版本，则GitHub使用环境的默认值node版本")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("node-version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("8.x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 10.x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 12.x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# steps字段指定每个job的运行步骤，可以包含一个或多个步骤，每个步骤都可以配置指定字段")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("steps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 切代码到 runner拉取代码。这里用的是 GitHub 官方的 action: actions/checkout@v2")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("uses")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" actions/checkout@v2\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在当前操作系统安装node")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Use Node.js $"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" matrix.node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("version "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("uses")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" actions/setup"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("node@v1\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("with")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("node-version")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" $"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" matrix.node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("version "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# npm ci和yarn --frozen-lockfile安装package-lock.json或者npm-shrinkwrap.json文件中的依赖，这样可以防止npm install安装时lock文件发生变化。")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 该运行的命令或者action")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装依赖、运行测试、打包")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" npm install\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" npm test\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("run")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" npm run build\n      "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("env")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("CI")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token boolean important"}},[s._v("true")]),s._v("\n")])])]),n("h3",{attrs:{id:"常见的-actions-配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见的-actions-配置"}},[s._v("#")]),s._v(" 常见的 Actions 配置")]),s._v(" "),n("ul",[n("li",[s._v("打版本标签 Create Tag Release")]),s._v(" "),n("li",[s._v("创建 Github Pages 站点")]),s._v(" "),n("li",[s._v("多人协作开发，云端代码检测")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions?fileGuid=1PWJAvQBtLA5IGh3",target:"_blank",rel:"noopener noreferrer"}},[s._v("更多 Actions 配置"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"搭配-docker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#搭配-docker"}},[s._v("#")]),s._v(" 搭配 Docker")]),s._v(" "),n("h3",{attrs:{id:"为什么要使用-docker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用-docker"}},[s._v("#")]),s._v(" 为什么要使用 Docker")]),s._v(" "),n("p",[s._v("没有 Docker 之前，使用 webhook 实现自动部署，但后面遇到了服务器到期更换服务器的时候，就只能重复操作进行迁移，而且文件目录管理混乱，项目变多时，维护成本也会越来越高，Docker 五大优势：持续集成、版本控制、可移植性、隔离性和安全性")]),s._v(" "),n("h3",{attrs:{id:"实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[s._v("#")]),s._v(" 实践")]),s._v(" "),n("h4",{attrs:{id:"在项目根目录下新建-nginx-配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在项目根目录下新建-nginx-配置"}},[s._v("#")]),s._v(" 在项目根目录下新建 Nginx 配置")]),s._v(" "),n("p",[s._v("在项目根目录新建 Nginx 配置文件 vhost.nginx.conf。")]),s._v(" "),n("div",{staticClass:"language-conf extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("server {\nlisten 80;\nserver_name localhost;\nlocation / {\n  root /usr/share/nginx/html;\n  index index.html index.htm;\n  proxy_set_header Host $host;\n  if (!-f $request_filename) {\n    rewrite ^.*$ /index.html break;\n  }\n}\nerror_page 500 502 503 504 /50x.html;\nlocation = /50x.html {\n    root /usr/share/nginx/html;\n  }\n}\n")])])]),n("h4",{attrs:{id:"项目根目录新建-dockerfile-文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#项目根目录新建-dockerfile-文件"}},[s._v("#")]),s._v(" 项目根目录新建 Dockerfile 文件")]),s._v(" "),n("p",[s._v("在项目根目录新建 Dockerfile 文件，构建镜像包使用。")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("FROM nginx\nCOPY ./dist/ /usr/share/nginx/html/\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 第一步nginx配置文件名称")]),s._v("\n  COPY ./vhost.nginx.conf /etc/nginx/conf.d/bilibili-vue.conf\nEXPOSE "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n")])])]),n("h4",{attrs:{id:"配置容器镜像服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置容器镜像服务"}},[s._v("#")]),s._v(" 配置容器镜像服务")]),s._v(" "),n("p",[s._v("这里我选择了阿里云的容器镜像服务 (https://www.aliyun.com/product/acr?fileGuid=1PWJAvQBtLA5IGh3)，为什么不使用国外的 dockhub (https://hub.docker.com/?fileGuid=1PWJAvQBtLA5IGh3) 呢，因为这样使用起来速度快一点，而且有免费的个人版足够我们使用。")]),s._v(" "),n("ol",[n("li",[s._v("初次打开需要开通服务，配置登陆密码（记录下来，后面要用）")]),s._v(" "),n("li",[s._v("然后创建命名空间，再创建我们的镜像仓库，这里如果不想别人下载你的镜像的话就可以选择私有。然后点击下一步配置代码源，这里我选择了本地仓库，一方面是为了日志统一，可以在 Github Actions 看到所有日志，一方面是可以通过命令行直接推送镜像到镜像仓库，自由度比较高。")]),s._v(" "),n("li",[s._v("之后就可以在页面看到我们创建的仓库，点击仓库名称进入，可以看到仓库的基本信息和操作指南，这个时候一个镜像仓库就完全创建成功了。")])]),s._v(" "),n("h4",{attrs:{id:"如何跟-actions-联动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何跟-actions-联动"}},[s._v("#")]),s._v(" 如何跟 Actions 联动")]),s._v(" "),n("p",[s._v("我们只要在 Actions 中 build 镜像后登陆阿里云 Registry 实例就好了，但是这个时候如果铭文写在 yml 中肯定不行，可以在 Settings => Secrets => New repository secret ，设置 secret，配置上述容器镜像账号的用户名（阿里云用户名）和密码（上述配置容器镜像服务时设置的登录密码）。")]),s._v(" "),n("h4",{attrs:{id:"完整的-actions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#完整的-actions"}},[s._v("#")]),s._v(" 完整的 Actions")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("name: Docker Image CI "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Actions名称")]),s._v("\non: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("push"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行时机")]),s._v("\njobs:\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里我使用的是yarn，想用npm的同学将yarn命令修改为npm命令即可")]),s._v("\nbuild:\nruns-on: ubuntu-latest\nsteps:\n- name: checkout\nuses: actions/checkout@master\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装依赖")]),s._v("\n- name: "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\nrun: "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打包")]),s._v("\n- name: build project\nrun: "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" run build\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打包镜像推送到阿里云容器镜像服务")]),s._v("\n- name: Build the Docker image\nrun: "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\ndocker login --username"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${{ secrets.DOCKER_USERNAME }")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" registry.cn-hangzhou.aliyuncs.com --password"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${{ secrets.DOCKER_PASSWORD }")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\ndocker build -t bilibili-vue:latest "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\ndocker tag bilibili-vue registry.cn-hangzhou.aliyuncs.com/zlyyyy/bilibili-vue:latest\ndocker push registry.cn-hangzhou.aliyuncs.com/zlyyyy/bilibili-vue:latest "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 推送")]),s._v("\n- name: "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" docker login "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用appleboy/ssh-action@master登录服务器执行拉取镜像脚本，服务器ip、用户名、密码配置方式同容器镜像服务配置方式一样")]),s._v("\nuses: appleboy/ssh-action@master\nwith:\n        host: "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${{ secrets.SSH_HOST }")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nusername: "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${{ secrets.SSH_USERNAME }")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\npassword: "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${{ secrets.SSH_PASSWORD }")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nscript: "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" ~ "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v(" bilibili-vue-deploy.sh "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${{ secrets.DOCKER_USERNAME }")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${{ secrets.DOCKER_PASSWORD }")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("最后一步登录服务器后，我执行了一个脚本来拉取云端最新镜像，并删除旧镜像，启动新镜像。脚本内容如下。")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"---------docker Login--------"')]),s._v("\ndocker login --username"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v(" registry.cn-hangzhou.aliyuncs.com --password"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"---------docker Stop--------"')]),s._v("\ndocker stop bilibili-vue\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"---------docker Rm--------"')]),s._v("\ndocker "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" bilibili-vue\ndocker rmi registry.cn-hangzhou.aliyuncs.com/zlyyyy/bilibili-vue:latest\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"---------docker Pull--------"')]),s._v("\ndocker pull registry.cn-hangzhou.aliyuncs.com/zlyyyy/bilibili-vue:latest\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"---------docker Create and Start--------"')]),s._v("\ndocker run --rm -d -p "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8081")]),s._v(":80 --name bilibili-vue registry.cn-hangzhou.aliyuncs.com/zlyyyy/bilibili-vue:latest\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" -e "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"---------deploy Success--------"')]),s._v("\n")])])]),n("h4",{attrs:{id:"测试流程-查看日志"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试流程-查看日志"}},[s._v("#")]),s._v(" 测试流程，查看日志")]),s._v(" "),n("p",[s._v("推送一次代码测试，打开 Actions 后可以看到自动运行的实时 workflow 结果，以及每步的日志信息。")]),s._v(" "),n("h4",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("p",[s._v("自动化部署成功之后，我们不需要每次修改代码，手动更新线上了，后面迁移也会更方便，还有更多的自动化部署方式，比如直接使用 Github+阿里云镜像仓库的触发器一样可以做到，容器服务有很多云服务厂商都是一样的使用方式")]),s._v(" "),n("h2",{attrs:{id:"github-actions-部署-vuepress-文档"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#github-actions-部署-vuepress-文档"}},[s._v("#")]),s._v(" GitHub Actions 部署 VuePress 文档")]),s._v(" "),n("p",[s._v("GitHub Actions 是 GitHub 的持续集成服务。在 2018 年 10 月推出。")]),s._v(" "),n("h3",{attrs:{id:"vuepress-文档"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vuepress-文档"}},[s._v("#")]),s._v(" Vuepress 文档")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建并进入新目录，使用包管理器进行初始化并安装vuepress依赖")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" vuepress-demo "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" vuepress-demo "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" init -y "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -D vuepress\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建文档")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" docs "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'# Hello VuePress'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" docs/README.md\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加script脚本")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"scripts"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"docs:dev"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vuepress dev docs"')]),s._v(",\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"docs:build"')]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vuepress build docs"')]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动服务")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("yarn")]),s._v(" docs:dev\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在docs/.vuepress/config.js设置正确的base")]),s._v("\n")])])]),n("h3",{attrs:{id:"创建-github-actions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建-github-actions"}},[s._v("#")]),s._v(" 创建 GitHub Actions")]),s._v(" "),n("p",[s._v("首先在仓库菜单栏中选择 Actions 进入到创建页面。")]),s._v(" "),n("p",[s._v("简单的修改一下命令")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This is a basic workflow to help you get started with Actions")]),s._v("\n\nname: CI\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Controls when the action will run.")]),s._v("\non:\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Triggers the workflow on push or pull request events but only for the master branch")]),s._v("\n  push:\n    branches: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" master "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  pull_request:\n    branches: "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" master "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Allows you to run this workflow manually from the Actions tab")]),s._v("\n  workflow_dispatch:\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A workflow run is made up of one or more jobs that can run sequentially or in parallel")]),s._v("\njobs:\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# This workflow contains a single job called "build"')]),s._v("\n  build:\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The type of runner that the job will run on")]),s._v("\n    runs-on: ubuntu-latest\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Steps represent a sequence of tasks that will be executed as part of the job")]),s._v("\n    steps:\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it")]),s._v("\n      - uses: actions/checkout@v2\n\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Runs a single command using the runners shell")]),s._v("\n      - name: Run a ci script\n        run: "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" i\n      - name: Run a docs script\n        env:\n          TOKEN: "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${{secrets.DEPLOY_KEY}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        run: "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run docs\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Runs a set of commands using the runners shell")]),s._v("\n      - name: Run a multi-line script\n        run: "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n          "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Add other actions to build,\n          "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" test, and deploy your project.\n")])])]),n("p",[s._v("GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的.github/workflows 目录。")]),s._v(" "),n("p",[s._v("workflow 文件采用 YAML 格式，文件名可以任意取，但是后缀名统一为.yml，一个库可以有多个 workflow 文件。GitHub 只要发现.github/workflows 目录里面有.yml 文件，就会自动运行该文件。")]),s._v(" "),n("p",[s._v("因为代码中定义了一个环境变量 Token 用来 git ssh 免密操作登录的，如果不配置就无法 git push 这些操作。我们需要将构建后的代码发到 GitHub 仓库，因此需要 GitHub 密钥。")]),s._v(" "),n("p",[s._v("这个密钥存储到当前仓库的 Settings/Secrets 里面。")]),s._v(" "),n("p",[s._v("再创建文件 build/deploy.sh 用来执行 bash 脚本。")]),s._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Prepare")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" docs\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf .vuepress/dist\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Build")]),s._v("\nvuepress build\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Publish to GitHub Pages")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" .vuepress/dist\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config user.name "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"MonsterXiong"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" config user.email "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"942849672@qq.com"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" -A\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit -m "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[vuepress] update docs"')]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push --force "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://'),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${TOKEN}")]),s._v('@github.com/MonsterXiong/vuepress-demo.git"')]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master:gh-pages"')]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Cleanup")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf .vuepress/dist\n")])])]),n("p",[s._v("在 package.json 中增加一行 Scripts 命令。")]),s._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"scripts"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"docs:dev"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vuepress dev docs"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"docs:build"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vuepress build docs"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token property"}},[s._v('"docs"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bash ./build/deploy.sh"')]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("p",[s._v("最后提交代码，就会自动执行 Actions 将部署 Vuepress 文档到 GitHub Pages。我们就可以访问页面了，而且之后的每一次提交都会自动执行然后去更新文档的内容。")])])}),[],!1,null,null,null);t.default=e.exports}}]);