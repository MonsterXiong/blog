(window.webpackJsonp=window.webpackJsonp||[]).push([[247],{628:function(s,t,a){"use strict";a.r(t);var e=a(26),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"未来计划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#未来计划"}},[s._v("#")]),s._v(" 未来计划")]),s._v(" "),a("p",[s._v("源码的深入，一些库的使用与了解")]),s._v(" "),a("h2",{attrs:{id:"已写文章-待整理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#已写文章-待整理"}},[s._v("#")]),s._v(" 已写文章，待整理")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("排期")]),s._v(" "),a("h2",{attrs:{id:"排期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排期"}},[s._v("#")]),s._v(" 排期")]),s._v(" "),a("p",[s._v("各个节点的时间安排，才能整体对项目的排期做一个规划")]),s._v(" "),a("h3",{attrs:{id:"如何进项项目排期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何进项项目排期"}},[s._v("#")]),s._v(" 如何进项项目排期")]),s._v(" "),a("p",[s._v("排期向上汇报通常以天为单位，有些小需求也可能以 0.5 天为一个单位，但是我们想要预估准确，排期时就要以小时为单位给自己拆分任务，所以需要考虑一个问题，每天的有效工作时间有几个小时")]),s._v(" "),a("h3",{attrs:{id:"作息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作息"}},[s._v("#")]),s._v(" 作息")]),s._v(" "),a("p",[s._v("早上 10 点上班，中午 12 点午休，下午 2 点开始工作，晚上 7 点下班。\n那么每天的工作时间为 2+5=7 小时\n新需求来了，你估时为 30 小时，那么排期为 30/7≈5 天")]),s._v(" "),a("h3",{attrs:{id:"但每天-7-小时真的能都投入到项目开发吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#但每天-7-小时真的能都投入到项目开发吗"}},[s._v("#")]),s._v(" 但每天 7 小时真的能都投入到项目开发吗？")]),s._v(" "),a("p",[s._v("计划五天的事情，最后却总需要加班 996 甚至通宵熬夜，一些影响开发时间的一系列问题")]),s._v(" "),a("ol",[a("li",[s._v("开发时是否经历过被其它线上问题打扰，修复线上问题是否占用了这 7 个小时的一部分时间")]),s._v(" "),a("li",[s._v("上个项目提测后是否还需要跟测？修改上个项目的 bug 时是否占用了 7 个小时中的一部分时间？")]),s._v(" "),a("li",[s._v("上个项目测试通过后需要上线和回归？如果上线后有问题，是否会被占用时间")]),s._v(" "),a("li",[s._v("本次需求是否进行了接口评审？没评审之前就给排期，接口和预想不一致时是否占用了这 7 个小时中的一部分时间去沟通做接口评审")]),s._v(" "),a("li",[s._v("是否预留了本次需求方案设计时间？")]),s._v(" "),a("li",[s._v("是否预留了本次需求联调时间？")]),s._v(" "),a("li",[s._v("是否预留了本次需求自测时间，如果不做好自测，在做下个需求时，这个需求频繁报 bug，是否还会影响下个需求的开发时间？")]),s._v(" "),a("li",[s._v("提测部署代码和环境是否要预留时间？")]),s._v(" "),a("li",[s._v("是否预留了各种开会时间？周会、周报、月会、日会、日报、其他需求评审等，遇到开会占用了一天时间应该怎么处理")])]),s._v(" "),a("h3",{attrs:{id:"假设如下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#假设如下"}},[s._v("#")]),s._v(" 假设如下")]),s._v(" "),a("ol",[a("li",[s._v("每天预留半个个小时处理各种线上问题（7-0.5=6.5）")]),s._v(" "),a("li",[s._v("新项目中预留上个项目修改 bug 时间 5 小时（本次项目估时+5 小时）")]),s._v(" "),a("li",[s._v("新项目中预留上个项目的上线和回归时间 4 小时（本次项目估时+4 小时）")]),s._v(" "),a("li",[s._v("在开发之前进行接口评审，没评审之前不进入开发阶段（接口不确定，前端无法进入开发）")]),s._v(" "),a("li",[s._v("如果本次需求是新项目，需要预留技术预研和方案设计时间（新项目需求+技术预研和方案设计时间）")]),s._v(" "),a("li",[s._v("需求评估联调时间，这个估时依据主要看后端人员的接口开发质量，前后端都按照接口文档严格开发，后端接口毫无 bug，1 天就能结束联调（主要看接口质量，根据之前的经验来估时）")]),s._v(" "),a("li",[s._v("自测很重要，根据需求预留自测时间（本次项目估时+5 小时）")]),s._v(" "),a("li",[s._v("提测部署代码是否需要预留时间，有些公司基建很好，部署代码完全自动化，有些则需要搞很久，公司问题，公司要为它买单，所以根据实际情况预留时间（本次项目估时+2 小时）")]),s._v(" "),a("li",[s._v("首先每天预留 1.5 小时的开会时间（6.5-1.5=5）")])]),s._v(" "),a("h3",{attrs:{id:"再来看刚才的估时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#再来看刚才的估时"}},[s._v("#")]),s._v(" 再来看刚才的估时")]),s._v(" "),a("p",[s._v("30 小时+5 小时 bug+4 小时上线和回归+5 小时自测+2 小时提测部署=46 小时")]),s._v(" "),a("p",[s._v("46/每天有效工作时间 5 小时=9 天")]),s._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("公司基建好，可以节省很多提测部署上线时间，所以根据实际情况来合理排期，准确预估好自己的排期。")])]),s._v(" "),a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),a("ul",[a("li",[s._v("模板引擎")]),s._v(" "),a("li",[s._v("抽象语法树")]),s._v(" "),a("li",[s._v("虚拟 DOM 和 diff 算法")]),s._v(" "),a("li",[s._v("生命周期")]),s._v(" "),a("li",[s._v("Devops")])]),s._v(" "),a("h2",{attrs:{id:"团队协作以及提效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#团队协作以及提效"}},[s._v("#")]),s._v(" 团队协作以及提效")]),s._v(" "),a("ul",[a("li",[s._v("前后端分离\n"),a("ul",[a("li",[s._v("mockjs")])])]),s._v(" "),a("li",[s._v("监控，日志系统")])]),s._v(" "),a("h2",{attrs:{id:"待续-笔记整理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#待续-笔记整理"}},[s._v("#")]),s._v(" 待续-笔记整理")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("Pinia")]),s._v(" "),a("p",[s._v("面向未来的 Vuex——"),a("a",{attrs:{href:"https://pinia.esm.dev/",target:"_blank",rel:"noopener noreferrer"}},[s._v("pinia"),a("OutboundLink")],1),s._v(" "),a("a",{attrs:{href:"https://github.com/vuejs/rfcs/pull/271",target:"_blank",rel:"noopener noreferrer"}},[s._v("rfcs/271"),a("OutboundLink")],1)]),s._v(" "),a("ul",[a("li",[s._v("no mutation,")]),s._v(" "),a("li",[s._v("only state、getters、actions")])])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("cypressjs")]),s._v(" "),a("p",[s._v("面向未来的组件测试方式")]),s._v(" "),a("p",[s._v("基于 cypress 在 chrome 中测试组件")]),s._v(" "),a("p",[s._v("e2e=>组件级测试=>单元测试")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("Vue 以及周边")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("Webpack")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("Jest")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("模块化")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("深入牙羽 JS")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("Vuepress")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("Koa")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("CLI")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("自定义工具函数")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("权限设计")])]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("术语")])]),s._v(" "),a("h2",{attrs:{id:"windows-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#windows-命令"}},[s._v("#")]),s._v(" windows 命令")]),s._v(" "),a("p",[s._v("https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/tree#BKMK_examples")]),s._v(" "),a("h2",{attrs:{id:"使用-jenkins-自动部署项目-vue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-jenkins-自动部署项目-vue"}},[s._v("#")]),s._v(" 使用 Jenkins 自动部署项目 Vue")]),s._v(" "),a("h3",{attrs:{id:"目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目标"}},[s._v("#")]),s._v(" 目标")]),s._v(" "),a("p",[s._v("本地 push 代码到 Github，webhook 自动触发 jenkins 上的构建动作，完成 node 插件并且打包，然后通过 publish over ssh 插件，将打包出来的文件，部署到目标服务器上。")]),s._v(" "),a("h3",{attrs:{id:"前期准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前期准备"}},[s._v("#")]),s._v(" 前期准备")]),s._v(" "),a("ol",[a("li",[s._v("github 账号和项目")]),s._v(" "),a("li",[s._v("centos 服务器")]),s._v(" "),a("li",[s._v("服务器安装 Java SDK")]),s._v(" "),a("li",[s._v("服务器安装 nginx+启动；")]),s._v(" "),a("li",[s._v("服务器安装 jenkins+启动")])]),s._v(" "),a("h3",{attrs:{id:"jenkins-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jenkins-介绍"}},[s._v("#")]),s._v(" jenkins 介绍")]),s._v(" "),a("p",[s._v("Jenkins 是开源的，使用 Java 编写的持续集成的工具，在 Centos 上可以通过 yum 命令行直接安装。Jenkins 只是一个平台，真正运作的都是插件。这就是 jenkins 流行的原因，因为 jenkins 什么插件都有。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 首先登陆服务器更新系统软件")]),s._v("\nyum update\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装Java和git")]),s._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" java\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装nginx")]),s._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动nginx")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" nginx start\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装Jenkins")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rpm")]),s._v(" --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# yum命令安装Jenkins")]),s._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" jenkins\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动Jenkins，默认端口是8080")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" jenkins restart\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 输入cat /var/lib/jenkins/secrets/initialAdminPassword 查看初始密码")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装通用推荐的插件即可，然后安装两个推荐的插件 Rebuilder和SafeRestart")]),s._v("\n")])])]),a("h3",{attrs:{id:"在-jenkins-中安装-nodejs-插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在-jenkins-中安装-nodejs-插件"}},[s._v("#")]),s._v(" 在 jenkins 中安装 nodeJs 插件")]),s._v(" "),a("h3",{attrs:{id:"安装-publish-over-ssh-插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-publish-over-ssh-插件"}},[s._v("#")]),s._v(" 安装 Publish Over SSH 插件，")]),s._v(" "),a("p",[s._v("我们将通过这个工具实现服务器部署功能。")]),s._v(" "),a("p",[s._v("安装完成后在系统管理->系统设置->publish over SSH 里设置服务器信息。")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("Passphrase：密码（key的密码，没设置就是空）\nPath to key：key文件（私钥）的路径\nKey：将私钥复制到这个框中"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("path to key和key写一个即可"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nSSH Servers的配置：\nSSH Server Name：标识的名字（随便你取什么）\nHostname：需要连接ssh的主机名或ip地址（建议ip）\nUsername：用户名\nRemote Directory：远程目录（上面第二步建的testjenkins文件夹的路径）\n\n高级配置：\nUse password authentication, or use a different key：勾选这个可以使用密码登录，不想配ssh的可以用这个先试试\nPassphrase / Password：密码登录模式的密码\nPort：端口（默认22）\nTimeout "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("：超时时间（毫秒）默认300000\n")])])]),a("p",[s._v("在刚才的 testJenkins 工程中配置构建后操作，选择 send build artificial over SSH， 参数说明：")]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("Name:选择一个你配好的ssh服务器\nSource files ：写你要传输的文件路径\nRemove prefix ：要去掉的前缀，不写远程服务器的目录结构将和Source files写的一致\nRemote directory ：写你要部署在远程服务器的那个目录地址下，不写就是SSH Servers配置里默认远程目录\nExec "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" ：传输完了要执行的命令，我这里执行了进入test目录,解压缩,解压缩完成后删除压缩包三个命令\n")])])]),a("p",[s._v("注意在构建中添加压缩 dist 目录命令")]),s._v(" "),a("p",[s._v("接下来实现开发本地 push 代码到 github 上后，触发 Webhook，jenkins 自动执行构建。")]),s._v(" "),a("p",[s._v("jenkins 安装 Generic Webhook Trigger 插件\ngithub 添加触发器")]),s._v(" "),a("p",[s._v("配置方法")]),s._v(" "),a("ol",[a("li",[s._v("在刚才的 testJenkins 工程中点击构建触发器中选择 Generic Webhook Trigger，填写 token")]),s._v(" "),a("li",[s._v("github 配置 Webhook\n选择 github 项目中的 Settings->Webhooks>add webhook\n配置方式按上图红框中的格式，选择在 push 代码时触发 webhook，成功后会在下方出现一个绿色的小勾勾")])]),s._v(" "),a("p",[s._v("试一下，把 vue 项目首页的 9900 去了，然后 push 代码去 github，发现 Jenkins 中的构建已经自动执行.")]),s._v(" "),a("p",[s._v("一套简单的前端自动化工作流就搭建完成，是选择代码 push 后在 Jenkins 中手动构建，还是 push 后自动构建，看公司情况使用")])])}),[],!1,null,null,null);t.default=n.exports}}]);