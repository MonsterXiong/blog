(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{557:function(e,n,t){"use strict";t.r(n);var o=t(26),r=Object(o.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"vue-的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-的生命周期"}},[e._v("#")]),e._v(" Vue 的生命周期")]),e._v(" "),t("p",[e._v("一、生命周期是什么")]),e._v(" "),t("p",[e._v("生命周期（Life Cycle）的概念应用很广泛，特别是在政治、经济、环境、技术、社会等诸多领域经常出现，其基本涵义可以通俗地理解为“从摇篮到坟墓”（Cradle-to-Grave）的整个过程\n在 Vue 中实例从创建到销毁的过程就是生命周期，即指从创建、初始化数据、编译模板、挂载 Dom→ 渲染、更新 → 渲染、卸载等一系列过程\n我们可以把组件比喻成工厂里面的一条流水线，每个工人（生命周期）站在各自的岗位，当任务流转到工人身边的时候，工人就开始工作\nPS：在 Vue 生命周期钩子会自动绑定 this 上下文到实例中，因此你可以访问数据，对 property 和方法进行运算\n这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 created: () => this.fetchTodos())\n二、生命周期有哪些")]),e._v(" "),t("p",[e._v("Vue 生命周期总共可以分为 8 个阶段：创建前后, 载入前后,更新前后,销毁前销毁后，以及一些特殊场景的生命周期\n生命周期 描述\nbeforeCreate 组件实例被创建之初\ncreated 组件实例已经完全创建\nbeforeMount 组件挂载之前\nmounted 组件挂载到实例上去之后\nbeforeUpdate 组件数据发生变化，更新之前\nupdated 数据数据更新之后\nbeforeDestroy 组件实例销毁之前\ndestroyed 组件实例销毁之后\nactivated keep-alive 缓存的组件激活时\ndeactivated keep-alive 缓存的组件停用时调用\nerrorCaptured 捕获一个来自子孙组件的错误时被调用\n三、生命周期整体流程")]),e._v(" "),t("p",[e._v("Vue 生命周期流程图\n图片\n具体分析")]),e._v(" "),t("p",[e._v("beforeCreate -> created\n初始化 vue 实例，进行数据观测\ncreated\n完成数据观测，属性与方法的运算，watch、event 事件回调的配置\n可调用 methods 中的方法，访问和修改 data 数据触发响应式渲染 dom，可通过 computed 和 watch 完成数据计算\n此时 vm.$el 并没有被创建\ncreated -> beforeMount\n判断是否存在el选项，若不存在则停止编译，直到调用vm.$mount(el)才会继续编译\n优先级：render > template > outerHTML\nvm.el 获取到的是挂载 DOM 的\nbeforeMount\n在此阶段可获取到 vm.el\n此阶段 vm.el 虽已完成 DOM 初始化，但并未挂载在 el 选项上\nbeforeMount -> mounted\n此阶段 vm.el 完成挂载，vm.$el生成的DOM替换了el选项所对应的DOM\nmounted\nvm.el已完成DOM的挂载与渲染，此刻打印vm.$el，发现之前的挂载点及内容已被替换成新的 DOM\nbeforeUpdate\n更新的数据必须是被渲染在模板上的（el、template、render 之一）\n此时 view 层还未更新\n若在 beforeUpdate 中再次修改数据，不会再次触发更新方法\nupdated\n完成 view 层的更新\n若在 updated 中再次修改数据，会再次触发更新方法（beforeUpdate、updated）\nbeforeDestroy\n实例被销毁前调用，此时实例属性与方法仍可访问\ndestroyed\n完全销毁一个实例。可清理它与其它实例的连接，解绑它的全部指令及事件监听器\n并不能清除 DOM，仅仅销毁实例")]),e._v(" "),t("p",[e._v("使用场景分析")]),e._v(" "),t("p",[e._v("生命周期 描述\nbeforeCreate 执行时组件实例还未创建，通常用于插件开发中执行一些初始化任务\ncreated 组件初始化完毕，各种数据可以使用，常用于异步数据获取\nbeforeMount 未执行渲染、更新，dom 未创建\nmounted 初始化结束，dom 已创建，可用于获取访问数据和 dom 元素\nbeforeUpdate 更新前，可用于获取更新前各种状态\nupdated 更新后，所有状态已是最新\nbeforeDestroy 销毁前，可用于一些定时器或订阅的取消\ndestroyed 组件已销毁，作用同上\n四、题外话：数据请求在 created 和 mouted 的区别")]),e._v(" "),t("p",[e._v("created 是在组件实例一旦创建完成的时候立刻调用，这时候页面 dom 节点并未生成\nmounted 是在页面 dom 节点渲染完毕之后就立刻执行的\n触发时机上 created 是比 mounted 要更早的\n两者相同点：都能拿到实例对象的属性和方法\n讨论这个问题本质就是触发的时机，放在 mounted 请求有可能导致页面闪动（页面 dom 结构已经生成），但如果在页面加载前完成则不会出现此情况\n建议：放在 create 生命周期当中")])])}),[],!1,null,null,null);n.default=r.exports}}]);