(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{459:function(a,t,n){"use strict";n.r(t);var s=n(26),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"lerna"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lerna"}},[a._v("#")]),a._v(" Lerna")]),a._v(" "),n("h2",{attrs:{id:"lerna-是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lerna-是什么"}},[a._v("#")]),a._v(" Lerna 是什么？")]),a._v(" "),n("p",[a._v("Lerna 是一个管理工具，用于管理包含多个软件包（package）的 JavaScript 项目。")]),a._v(" "),n("p",[a._v("Lerna 是一个用来优化托管在 git/npm 上的多 packag 代码库的工作流的一个管理工具,可以让你在主项目下管理多个子项目,从而解决了多个包互相依赖,且发布时需要手动维护多个包的问题。")]),a._v(" "),n("h2",{attrs:{id:"lerna-解决了什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lerna-解决了什么"}},[a._v("#")]),a._v(" Lerna 解决了什么?")]),a._v(" "),n("p",[n("strong",[a._v("资源浪费")])]),a._v(" "),n("p",[a._v("通常情况下,一个公司的业务项目只有一个主干,多 git repo 的方式,这样 node_modules 会出现大量的冗余,它们可能都会安装同样的包,浪费了大量存储空间。")]),a._v(" "),n("p",[n("strong",[a._v("调试繁琐")])]),a._v(" "),n("p",[a._v("很多公共的包通过 npm 安装,想要调试依赖的包时,需要通过 npm link 的方式进行调试。")]),a._v(" "),n("p",[n("strong",[a._v("资源包升级的问题")])]),a._v(" "),n("p",[a._v("一个项目依赖了多个 npm 包,当某一个子包代码修改升级时,都要对主干项目包进行升级修改。")]),a._v(" "),n("h2",{attrs:{id:"lerna-的核心原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lerna-的核心原理"}},[a._v("#")]),a._v(" Lerna 的核心原理")]),a._v(" "),n("p",[n("strong",[a._v("monorepo 和 multirepo 对比")])]),a._v(" "),n("p",[a._v("monorepo:时将所有的模块统一的放在一个主干分支中管理。")]),a._v(" "),n("p",[a._v("multirepo:将项目分化为多个模块,并针对每一个模块单独的开辟一个 repository 来进行管理。")]),a._v(" "),n("p",[n("strong",[a._v("lerna 软链实现")])]),a._v(" "),n("p",[a._v("Node.js 中如何实现软链")]),a._v(" "),n("p",[a._v("lerna 也是通过这种方式来试炼软链,它会创建名为 path 的链接,该链接指向 target。\n"),n("code",[a._v("fs.symlinkSync(target,path,type)")])]),a._v(" "),n("h2",{attrs:{id:"lerna-的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lerna-的使用"}},[a._v("#")]),a._v(" Lerna 的使用")]),a._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# lerna在使用之前需要全局安装lerna工具")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" i -g lerna\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 初始化lerna项目")]),a._v("\nlerna init\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建一个新的由lerna管理的包")]),a._v("\nlerna create "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("project-name"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装所有依赖项并连接所有的交叉依赖")]),a._v("\nlerna bootstrap\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 从所有的包中删除node_modules目录")]),a._v("\nlerna clean\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# lerna clean 不会删除项目最外层的根node_modules")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 增加模块包到最外层的公共node_odules中")]),a._v("\nlerna "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("package-name"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 将本地路径<pathToRepo>中的软件包导入(import)packages/<directory-name>中并提交commit")]),a._v("\nlerna "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("import")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("pathToRepo"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# lerna管理的项目和导入的项目必须都是git项目,提交了commit,以及npm初始化")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 增加模块包到packages中指定项目下面是将demo1模块增加到demo2项目中")]),a._v("\nlerna "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" demo1 --scope"),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("demo2\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在packages中对应包下执行任意命令下的命令,是对packages下的demo2项目执行yarn start命令,")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 比较常用,可以把它配置到最外层的package.json中")]),a._v("\nlerna "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" --scope demo2 -- "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" start\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 如果命令中不增加--scope demo2直接使用下面的命令,")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 这会在packages下所有的包执行命令rm -rf ./node_moudles")]),a._v("\nlerna "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -- "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" -rf ./node_modules\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 显示lerna管理的所有包")]),a._v("\nlerna list "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("等同于 lerna "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 检查自上次发布以来哪些软件包被修改过。")]),a._v("\nlerna changed\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 列出所有或某个软件包自上次发布以来的修改情况。")]),a._v("\nlerna "),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("diff")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("package?"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在每一个包含 [script] 脚本的软件包中运行此 npm 脚本。")]),a._v("\nlerna run "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("script"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 在当前项目中发布包")]),a._v("\nlerna publish\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# 这个命令可以结合lerna.json中的"version":"independent"配置一起使用,')]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 可以完成统一发布版本号和packages下每个模板发布的效果")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# lerna publish 永远不会发布标记为private的包(package.json中的"private":true)')]),a._v("\n\n")])])]),n("h2",{attrs:{id:"lerna-应用-适用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lerna-应用-适用场景"}},[a._v("#")]),a._v(" Lerna 应用(适用场景)")]),a._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/facebook/jest",target:"_blank",rel:"noopener noreferrer"}},[n("code",[a._v("facebook/jest")]),n("OutboundLink")],1),a._v(" 使用的是 "),n("code",[a._v("lerna")]),a._v(" 进行管理")]),a._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/alibaba/rax",target:"_blank",rel:"noopener noreferrer"}},[n("code",[a._v("alibaba/rax")]),n("OutboundLink")],1),a._v(" 使用的是 "),n("code",[a._v("lerna")]),a._v(" 进行管理")]),a._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/vuejs/vue-cli",target:"_blank",rel:"noopener noreferrer"}},[n("code",[a._v("vuejs/vue-cli")]),n("OutboundLink")],1),a._v(" 使用的是 "),n("code",[a._v("lerna")]),a._v(" 进行管理")])]),a._v(" "),n("h2",{attrs:{id:"lerna-弊端"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lerna-弊端"}},[a._v("#")]),a._v(" Lerna 弊端")]),a._v(" "),n("p",[a._v("由于源码在一起,仓库变更非常常见,存储空间也变得很大,甚至几 G,CI 测试运行实践也会变长。")]),a._v(" "),n("h2",{attrs:{id:"踩坑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#踩坑"}},[a._v("#")]),a._v(" 踩坑")]),a._v(" "),n("p",[a._v("有时候创建项目,项目之间会有很多重复部分,并且会占用大量的硬盘空间。")]),a._v(" "),n("p",[n("strong",[a._v("lerna bootstrap")])]),a._v(" "),n("p",[a._v("lerna 提供了可以将子项目的依赖包提升到最顶层的方式,我们可以执行"),n("code",[a._v("lerna clean")]),a._v("先删除每个子项目的"),n("code",[a._v("node_modules")]),a._v(",然后在执行命令 "),n("code",[a._v("lerna bootstrap --hoist")]),a._v("。")]),a._v(" "),n("p",[n("code",[a._v("lerna bootstrap --hoist")]),a._v("会将"),n("code",[a._v("packages")]),a._v("目录下的公共模块抽离到最顶层,但是这种方式会有一个问题,不同版本号只会保留使用最多的版本,这种配置不太好,当项目中有些功能需要依赖老版本时,就会出现问题。")]),a._v(" "),n("p",[n("strong",[a._v("yarn workspaces")])]),a._v(" "),n("p",[n("code",[a._v("yarn workspaces")]),a._v("可以解决当不同项目依赖不同的版本号问题,"),n("code",[a._v("yarn workspaces")]),a._v("会检查每个子项目里面依赖及其版本,如果版本不一致都会保留到自己的"),n("code",[a._v("node_modules")]),a._v("中,只有依赖版本号一致的时候才会提升到顶层.需要在"),n("code",[a._v("lerna.json")]),a._v("中增加配置。")]),a._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token property"}},[a._v('"npmClient"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"yarn"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//指定npmClient为yarn")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token property"}},[a._v('"useWorkspaces"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//将useWorkspaces设置为true")]),a._v("\n")])])]),n("p",[a._v("并在顶层的 package.json 中增加配置。")]),a._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 顶层的package.json")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[a._v('"workspaces"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"packages/*"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("增加这个配置之后不再需要"),n("code",[a._v("lerna bootstrap")]),a._v("来安装依赖了,可以直接使用"),n("code",[a._v("yarn install")]),a._v(" 进行依赖的安装."),n("code",[a._v("yarn install")]),a._v(" 无论在顶层运行还是在任意一个子项目运行效果都是可以的。")]),a._v(" "),n("h2",{attrs:{id:"实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[a._v("#")]),a._v(" 实践")]),a._v(" "),n("div",{staticClass:"language-sh extra-class"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[a._v("git")]),a._v(" init lerna-repo "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" lerna-repo "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" lerna init\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);