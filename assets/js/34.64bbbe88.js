(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{417:function(t,r,v){"use strict";v.r(r);var _=v(26),a=Object(_.a)({},(function(){var t=this,r=t.$createElement,v=t._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"docker"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[t._v("#")]),t._v(" Docker")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://img.monsterbear.top/img/Docker%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4.png",alt:"image-20210526030710420"}})]),t._v(" "),v("h2",{attrs:{id:"简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),v("ol",[v("li",[t._v("了解 Docker 的前生 LXC")])]),t._v(" "),v("p",[t._v("LXC 为 Linux Container 的简写。可以提供轻量级的虚拟化，以便隔离进程和资源，而且不需要提供指令解释机制以及全虚拟化的其他复杂性。相当于 C++中的 NameSpace。容器有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。")]),t._v(" "),v("p",[t._v("与传统虚拟化技术相比，它的优势在于：")]),t._v(" "),v("ul",[v("li",[t._v("与宿主机使用同一个内核，性能消耗小；")]),t._v(" "),v("li",[t._v("不需要指令级模拟；")]),t._v(" "),v("li",[t._v("不需要即时（just-i-time）编译；")]),t._v(" "),v("li",[t._v("容器可以在 CPU 核心的本地运行指令，不需要任何专门的解释机制；")]),t._v(" "),v("li",[t._v("避免了准虚拟化和系统调用替换中的 复杂性；")]),t._v(" "),v("li",[t._v("轻量级隔离，在隔离的同时还提供共享机制，以实现容器与宿主机的资源共享。")])]),t._v(" "),v("p",[t._v("总结：Linux Container 是一种轻量级的虚拟化的是手段。")]),t._v(" "),v("p",[t._v("Liunx Container 提供了在单一可控主机节点上支持多个相互隔离的 server container 同时执行的机制。Linux Container 有点像 chroot，提供了一个拥有自己进程和网络空间的虚拟环境，但又有别于虚拟机，因为 lxc 是一种操作系统层次上的资源的虚拟化。")]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("Lxc 与 docker 什么关系？")])]),t._v(" "),v("p",[t._v("docker 并不是 LXC 替代品，docker 底层使用了 LXC 来实现，LXC 将 linux 进程沙盒化，使得进程之间互相隔离，并且能够控制各进程的资源分配。")]),t._v(" "),v("p",[t._v("在 LXC 的基础之上，docker 提供了一系列更强大的功能。")]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[t._v("什么是 docker")])]),t._v(" "),v("p",[t._v("docker 是一个开源的应用容器引擎，基于 go 语言开发并遵循了 apache2.0 协议开源。")]),t._v(" "),v("p",[t._v("docker 可以让开发者打爆他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 linux 服务器，也可以实现虚拟化。")]),t._v(" "),v("p",[t._v("容器是完全使用沙箱机制，相互之间不会有任何接口（类 iphone 的 app），并且容器开销极其低。")]),t._v(" "),v("ol",{attrs:{start:"4"}},[v("li",[t._v("docker 官方文档")])]),t._v(" "),v("p",[t._v("https://docs.docker.com")]),t._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[t._v("为什么 docker 越来越受欢迎")])]),t._v(" "),v("p",[t._v("官方话语：容器化越来越受欢迎，因为容器是：")]),t._v(" "),v("ul",[v("li",[t._v("灵活：即使是最复杂的应用也可以集装箱化。")]),t._v(" "),v("li",[t._v("轻量级：容器利用并共享主机内核。")]),t._v(" "),v("li",[t._v("可互换：您可以即时部署更新和升级。")]),t._v(" "),v("li",[t._v("便携式：您可以在本地构建，部署到云，并在任何地方运行。")]),t._v(" "),v("li",[t._v("可扩展：您可以增加并自动分发容器副本。")]),t._v(" "),v("li",[t._v("可堆叠：您可以垂直和即时堆叠服务。")])]),t._v(" "),v("p",[v("strong",[t._v("镜像和容器（containers）")])]),t._v(" "),v("p",[t._v("通过镜像启动一个容器，一个镜像是一个可执行的包，其中包括运行应用程序所需要的所有内容包含代码、运行时间、库、环境变量和配置文件。容器是镜像的运行实例，当被运行时有镜像状态和用户进程，可以使用 docker ps 查看。")]),t._v(" "),v("p",[v("strong",[t._v("容器和虚拟机")])]),t._v(" "),v("p",[t._v("容器是在 linux 上本机运行，并在其他容器共享主机的内核，它运行的一个独立的进程，不占用其他任何可执行文件的内存，非常轻量。")]),t._v(" "),v("p",[t._v("虚拟机运行的是一个完成的操作系统，通过虚拟机管理程序对主机资源进行虚拟访问，相比之下需要的资源更多。")]),t._v(" "),v("h2",{attrs:{id:"other"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[t._v("#")]),t._v(" other")]),t._v(" "),v("p",[t._v("为什么要安装 docker 虚拟机，在其空间内安装环境和部署项目,非常麻烦")]),t._v(" "),v("p",[t._v("原因：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("解决隔离性问题，有些程序会占用大量内存占用缓存")])]),t._v(" "),v("li",[v("p",[t._v("使用虚拟机部署程序非常方便，需要使用开启，不需要使用删除")])])]),t._v(" "),v("blockquote",[v("p",[t._v("问题：为什么不在 Linux 内安装 Vmware，Vmware 是重量级虚拟机，Docker 是轻量级虚拟机")])]),t._v(" "),v("h4",{attrs:{id:"docker-虚拟机架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#docker-虚拟机架构"}},[t._v("#")]),t._v(" Docker 虚拟机架构")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://img.monsterbear.top/img/Docker%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%9E%B6%E6%9E%84.png",alt:"image-20210526025416318"}})]),t._v(" "),v("h4",{attrs:{id:"云计算中的-docker-虚拟机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#云计算中的-docker-虚拟机"}},[t._v("#")]),t._v(" 云计算中的 Docker 虚拟机")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://img.monsterbear.top/img/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%AD%E7%9A%84Docker%E8%99%9A%E6%8B%9F%E6%9C%BA.png",alt:"image-20210526025717059"}})]),t._v(" "),v("h4",{attrs:{id:"docker-镜像与容器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#docker-镜像与容器"}},[t._v("#")]),t._v(" Docker 镜像与容器")]),t._v(" "),v("ul",[v("li",[t._v("容器是从镜像中创建出来的虚拟实例")])]),t._v(" "),v("p",[t._v("容器用来运行程序，是读写层")]),t._v(" "),v("p",[t._v("镜像用来安装程序，是只读层")]),t._v(" "),v("h4",{attrs:{id:"安装-docker-虚拟机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker-虚拟机"}},[t._v("#")]),t._v(" 安装 Docker 虚拟机")]),t._v(" "),v("ul",[v("li",[t._v("先更新 yum 软件管理器，然后再安装 Docker")])]),t._v(" "),v("div",{staticClass:"language-sh extra-class"},[v("pre",{pre:!0,attrs:{class:"language-sh"}},[v("code",[t._v("yum -y update\nyum "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -y docker"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("-y代表选择程序安装中的yes选项"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);r.default=a.exports}}]);