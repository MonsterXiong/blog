(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{531:function(a,t,s){"use strict";s.r(t);var e=s(26),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h3",{attrs:{id:"vue实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue实例"}},[a._v("#")]),a._v(" Vue实例")]),a._v(" "),s("p",[a._v("无论时使用官方的脚手架，还是自己搭建的项目模板，最终都会创建一个Vue的实例对象并挂载到DOM上。")]),a._v(" "),s("p",[a._v("每个Vue应用都是通过用Vue函数创建一个新的Vue实例开始的：每当创建一个Vue实例，可以传入一个选项对象，这些选项用来创建想要的行为（methods、computed、watch等）。")]),a._v(" "),s("p",[a._v("一个Vue应用由一个通过new Vue创建的根Vue实例以及可选的、嵌套的、可复用的组件树组成")]),a._v(" "),s("h4",{attrs:{id:"数据与方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据与方法"}},[a._v("#")]),a._v(" 数据与方法：")]),a._v(" "),s("p",[a._v("当一个Vue实例被创建时，它将data对象中的所有属性加入到Vue的响应式系统中。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。")]),a._v(" "),s("p",[a._v("当这些数据改变时，视图会进行重新渲染。要注意的是，只有当实例被创建时，data中存在的属性才是响应式的。")]),a._v(" "),s("p",[a._v("唯一例外的是使用Object.freeze（）方法，该方法会阻止修改现有的属性，也意味着响应系统无法再追踪变化。")]),a._v(" "),s("blockquote",[s("p",[a._v("Object.freeze（）方法可以冻结一个对象，一个被冻结的对象再也不能被修改。冻结了一个对象后不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举型、可配置性、可写性，也不能修改已有属性的值，此外，冻结一个对象后该对象的原型也不能被修改。")])]),a._v(" "),s("p",[a._v("除了数据属性外，Vue实例还有一些有用的实例属性与方法。它们都有前缀$，以便于读者自定义的属性区分开来。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("app.$watch('a',function(newValue,oldValue){\n\t//这个回调函数将在app.a改变后调用\n})\n")])])]),s("h4",{attrs:{id:"实例生命周期钩子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例生命周期钩子"}},[a._v("#")]),a._v(" 实例生命周期钩子")]),a._v(" "),s("p",[a._v("每个Vue实例在被创建时，都要经过一系列的初始化过程。例如，需要设置数据监听、编译模板、将实例挂载到DOM，并在数据变化时更新DOM等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了开发者在不同阶段添加自己的代码的机会。")]),a._v(" "),s("p",[a._v("beforeCreate,created,beforeMount,mounted,beforeDestory,destroyed,beforeUpdate,updated")]),a._v(" "),s("h4",{attrs:{id:"实例化多个对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例化多个对象"}},[a._v("#")]),a._v(" 实例化多个对象")]),a._v(" "),s("p",[a._v("实例化多个对象和实例化单个Vue对象方法一样，只是绑定操控的el元素不同了。")]),a._v(" "),s("h3",{attrs:{id:"模板语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板语法"}},[a._v("#")]),a._v(" 模板语法")]),a._v(" "),s("p",[a._v("Vue使用了基于HTML的模板语法，允许开发者声明式地将DOM绑定至底层Vue实例地数据上。所有Vue的模板都是合法的HTML，所以能被遵循规范的浏览器和HTML解析器解析。")]),a._v(" "),s("p",[a._v("在底层的实现上，Vue将模板编译成虚拟DOM渲染函数。结合响应系统，Vue能够智能地计算出最少需要重新渲染多少组件，并把DOM操作次数减到最少。")]),a._v(" "),s("h4",{attrs:{id:"插值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插值"}},[a._v("#")]),a._v(" 插值")]),a._v(" "),s("p",[a._v("插值语法有以下3种")]),a._v(" "),s("ol",[s("li",[a._v("文本")])]),a._v(" "),s("p",[a._v("数据绑定最常见的形式就是使用“Mustache”语法（双大括号）的文本插值：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<span>Message:{{message}}</span>\n")])])]),s("p",[a._v("Mustache标签将会被替代为对应数据对象上message属性的值。无论何时，绑定的数据对象上message属性发生了改变，插值处的内容都会更新。")]),a._v(" "),s("p",[a._v("通过使用v-once指令，也能执行一次性地插值，当数据改变时，插值处地内容不会更新。但这会影响到该节点上地其他数据绑定")]),a._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[a._v("原始HTML")])]),a._v(" "),s("p",[a._v("双大括号会将数据解释为普通文本，而非HTML代码。为了输出真正的HTML，我们需要使用v-html指令。")]),a._v(" "),s("blockquote",[s("p",[a._v("不能使用v-html来复合局部模板，因为Vue不是基于字符串的模板殷勤。对于用户界面（UI），组件更适合作为可重用和可组合的基本单位。")])]),a._v(" "),s("blockquote",[s("p",[a._v("站点上动态渲染的任意HTML可能会非常危险，因为它很容易导致XSS攻击。请只对可信内容使用HTML插值，绝不要对用户提供的内容使用插值。")])]),a._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[a._v("使用JavaScript表达式")])]),a._v(" "),s("p",[a._v("在模板在，一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定，Vue都提供了完全的JavaScript表达式支持。")]),a._v(" "),s("h3",{attrs:{id:"指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[a._v("#")]),a._v(" 指令")]),a._v(" "),s("p",[a._v("指令（Directives）是带有“v-”前缀的特殊特性。指令特性的值预期是单个JavaScript表达式（v-for是例外情况）。指令的职责是，当表达式的值改变时，将其产生的连带影响响应式地作用于DOM。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('<p v-if="boole">现在你看到我了<p/>\n\n// 上面代码中，v-if指令将根据表达式布尔值（boole）的真假来插入或移除<p>元素。\n')])])]),s("ol",[s("li",[a._v("参数")])]),a._v(" "),s("p",[a._v("一些指令能够接受一个“参数”，在指令名称之后以冒号表示。例如，v-bind指令可以用于响应式地更新HTML特性：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('<a v-bind:href="url">...</a>\n\n//在这里href是参数，告知v-bind指令将该元素的href特性与表达式url的值绑定。\n\n//v-on指令用于监听DOM事件,其中参数click是监听的事件名\n<a v-on:click="doSomething">...</a>\n')])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("修饰符")])]),a._v(" "),s("p",[a._v("修饰符（modifier）是以半角符“.”指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent修饰符告诉v-on指令对于触发的事件调用event.preventDefault():")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('<form v-on:submit.prevent="onSubmit">...</form>\n')])])]),s("h3",{attrs:{id:"缩写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缩写"}},[a._v("#")]),a._v(" 缩写")]),a._v(" "),s("p",[a._v('"v-"前缀作为一种视觉提示，用来识别模板中Vue特定的特性。在使用Vue为现有标签添加动态行时，“v-”前缀很有帮助。然而，对于一些频繁用到的指令来说，就会感到使用起来很繁琐。同时，在构建由Vue管理所有模板的单页面应用程序时，“v-”前缀也变得没那么重要了。因此，Vue为v-bind和v-on这两个最常用的指令提供了特定简写。')]),a._v(" "),s("ol",[s("li",[a._v("v-bind缩写")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('\x3c!-- 完整语法 --\x3e\n<a v-bind:href="url">...</a>\n\x3c!-- 缩写 --\x3e\n<a :href="url">...</a>\n')])])]),s("ol",{attrs:{start:"2"}},[s("li",[a._v("v-on缩写")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('\x3c!-- 完整语法 --\x3e\n<a v-on:click="doSomething">...</a>\n\x3c!-- 缩写 --\x3e\n<a @click="doSomething">...</a>\n')])])]),s("p",[a._v("它们看起来可能与普通的HTML略有不同，但“：”与“@”对于特性名来说都是合法字符，在所有支持Vue的浏览器中都能被正确地解析。而且，它们不会出现在最终渲染的标记中。")]),a._v(" "),s("h3",{attrs:{id:"对vue指令中的动态参数的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对vue指令中的动态参数的理解"}},[a._v("#")]),a._v(" 对Vue指令中的动态参数的理解")]),a._v(" "),s("p",[a._v("从Vue2.6.0版本开始，可以用方括号括起来的JavaScript表达式作为一个指令的参数：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('<a v-bind:[attributeName]="url">...</a>\n')])])]),s("p",[a._v("这里的attributeName会被作为一个JavaScript表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果Vue实例有一个data属性attributeName，其值为href，那么这个绑定将等价于v-bind:href。")]),a._v(" "),s("p",[a._v("还可以使用动态参数为一个动态的事件名绑定处理函数：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('<a v-on:[eventName]="doSomething">...</a>\n\n//当eventName的值为focus时，v-on:[eventName]将等价于v-on:focus。\n')])])]),s("h3",{attrs:{id:"vue中virtual-dom-虚拟dom-和真实dom的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue中virtual-dom-虚拟dom-和真实dom的区别"}},[a._v("#")]),a._v(" Vue中virtual DOM(虚拟DOM)和真实DOM的区别")]),a._v(" "),s("p",[a._v("虚拟DOM其实就是JavaScript对象，以JavaScript对象的形式去添加DOM元素。")]),a._v(" "),s("p",[a._v("例如，DOM节点在HTML文档中的表现如下：")]),a._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("ul")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[a._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')]),a._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("item 1"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("item 2"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("li")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("ul")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])])]),s("p",[a._v("利用JavaScript来编写一个虚拟DOM，在没有渲染的情况下，它就是一个字符串、一个对象。例如下面代码：")]),a._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("let")]),a._v(" domNode"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    tag"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'ul'")]),a._v("\n    attributes"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("id"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'list'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\tchildren"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//这里是li")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("当把信息push到节点中时，才会变成真实DOM。")]),a._v(" "),s("p",[a._v("更新虚拟DOM的代码")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("domNode.children.push('<ul>item 3</ul>')\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);