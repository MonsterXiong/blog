(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{420:function(t,v,_){"use strict";_.r(v);var a=_(26),e=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"实践"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[t._v("#")]),t._v(" 实践")]),t._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#本地工作区文件的恢复"}},[t._v("本地工作区文件的恢复")])]),_("li",[_("a",{attrs:{href:"#远程分支删除后-删除本地分支与其关联"}},[t._v("远程分支删除后，删除本地分支与其关联")])]),_("li",[_("a",{attrs:{href:"#修改提交时的备注内容"}},[t._v("修改提交时的备注内容")])]),_("li",[_("a",{attrs:{href:"#修改分支名-实现无缝衔接"}},[t._v("修改分支名，实现无缝衔接")])]),_("li",[_("a",{attrs:{href:"#撤回提交"}},[t._v("撤回提交")])]),_("li",[_("a",{attrs:{href:"#撤销本地分支合并"}},[t._v("撤销本地分支合并")])]),_("li",[_("a",{attrs:{href:"#恢复误删的本地分支"}},[t._v("恢复误删的本地分支")])]),_("li",[_("a",{attrs:{href:"#不确定哪个分支有自己的提交"}},[t._v("不确定哪个分支有自己的提交")])])])]),_("p"),t._v(" "),_("ol",[_("li",[t._v("删除掉本地不存在的远程分支\n多人合作开发时，如果远程的分支被其他开发删除掉，在本地执行 git branch --all 依然会显示该远程分支，可使用下列的命令进行删除：")])]),t._v(" "),_("div",{staticClass:"language-sh extra-class"},[_("pre",{pre:!0,attrs:{class:"language-sh"}},[_("code",[t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 pull 命令，添加 -p 参数")]),t._v("\n$ "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull -p\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等同于下面的命令")]),t._v("\n$ "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch -p\n$ "),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch --prune origin\n\n")])])]),_("h2",{attrs:{id:"本地工作区文件的恢复"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本地工作区文件的恢复"}},[t._v("#")]),t._v(" 本地工作区文件的恢复")]),t._v(" "),_("p",[t._v("一般文件夹中的文件如果被删掉了，那只有在垃圾箱里面找了。如果垃圾箱里面的也被删掉了，在不借助工具的情况下怕是就找不到了。\n不过关联了 Git 的文件和文件就不一样了，有了本地仓库和远程仓库的双重保护，找到一个被删除的文件可以借助一下命令。")]),t._v(" "),_("p",[_("code",[t._v("语法")]),t._v(": "),_("code",[t._v("git checkout <filename/dirname>")])]),t._v(" "),_("p",[t._v("主要用于本地工作区文件的撤回。")]),t._v(" "),_("h2",{attrs:{id:"远程分支删除后-删除本地分支与其关联"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#远程分支删除后-删除本地分支与其关联"}},[t._v("#")]),t._v(" 远程分支删除后，删除本地分支与其关联")]),t._v(" "),_("p",[t._v("为方便分支提交，一般情况下会用本地命令"),_("code",[t._v("git branch --set-upstream-to=origin/master master")]),t._v("建立本地分支与远程分支的关联，从 master 拉出的分支可以自动建立与远程已有分支的关联，这样可以很方便的"),_("code",[t._v("git pull")]),t._v("和"),_("code",[t._v("git push")]),t._v("拉取远程分支的代码和将本地分支提交到远程。")]),t._v(" "),_("p",[t._v("Git 分支远程删除之后，本地分支就无法成功推送到远程，想要重新建立与远程仓库的关联，就需要先删除其原本的与已删除的远程分支的关联。")]),t._v(" "),_("p",[t._v("删除远程分支的命令："),_("code",[t._v("git push origin --delete <branch name>")])]),t._v(" "),_("p",[t._v("删除本地分支关联:")]),t._v(" "),_("p",[_("code",[t._v("语法")]),t._v("："),_("code",[t._v("git branch --unset-upstream <branch name>")])]),t._v(" "),_("p",[t._v("删除掉关联关系之后，用"),_("code",[t._v("git branch -vv")]),t._v("命令可查看到本地分支与远程分支的关联关系。")]),t._v(" "),_("h2",{attrs:{id:"修改提交时的备注内容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#修改提交时的备注内容"}},[t._v("#")]),t._v(" 修改提交时的备注内容")]),t._v(" "),_("p",[t._v('提交的时候填写了自己不满意的备注，修改最近一次提交的"commit message"备注。')]),t._v(" "),_("p",[_("code",[t._v("语法")]),t._v("："),_("code",[t._v("git commit --amend -m 'message'")])]),t._v(" "),_("p",[t._v("使用"),_("code",[t._v("git log --pretty=oneline")]),t._v("查看内容，发现成功修改了。")]),t._v(" "),_("p",[t._v("需要注意的是此项命令会修改提交时 commit-id，即会覆盖原本的提交，需要谨慎操作。")]),t._v(" "),_("h2",{attrs:{id:"修改分支名-实现无缝衔接"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#修改分支名-实现无缝衔接"}},[t._v("#")]),t._v(" 修改分支名，实现无缝衔接")]),t._v(" "),_("p",[t._v("不小心新建的分支名打错了，修复方法：")]),t._v(" "),_("p",[_("code",[t._v("语法")]),t._v("："),_("code",[t._v("git branch -m <old branch> <new branch>")])]),t._v(" "),_("p",[t._v("执行完之后工作区的内容没有丝毫变化，实现无痛过渡。")]),t._v(" "),_("h2",{attrs:{id:"撤回提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#撤回提交"}},[t._v("#")]),t._v(" 撤回提交")]),t._v(" "),_("p",[t._v("由于需求变更或者误操作等原因需要进行提交的撤回。")]),t._v(" "),_("p",[t._v("撤销场景：")]),t._v(" "),_("ul",[_("li",[t._v("已将更改提交到本地存储，需要撤回提交")]),t._v(" "),_("li",[t._v("用新的提交内容替换上一次的提交")]),t._v(" "),_("li",[t._v("本地提交了错误的文件")])]),t._v(" "),_("h4",{attrs:{id:"已将更改提交到本地-需要撤回提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#已将更改提交到本地-需要撤回提交"}},[t._v("#")]),t._v(" 已将更改提交到本地，需要撤回提交")]),t._v(" "),_("p",[_("code",[t._v("语法")]),t._v("："),_("code",[t._v("git reset --soft [<commit-id>/<HEAD~n>]")])]),t._v(" "),_("p",[_("code",[t._v("命令")]),t._v(": "),_("code",[t._v("git reset --soft HEAD~1")])]),t._v(" "),_("p",[t._v("执行命令后，"),_("code",[t._v("git status")]),t._v("文件变更记录与未提交之前的文件变更记录是一致的，只是撤销了 commit 的操作。")]),t._v(" "),_("h4",{attrs:{id:"用新的更改替换撤回的更改"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用新的更改替换撤回的更改"}},[t._v("#")]),t._v(" 用新的更改替换撤回的更改")]),t._v(" "),_("p",[t._v("提交之中可能有些地方需要优化，可以撤销本次的 commit 以及文件暂存状态，修改之后再重新添加到暂存区进行提交。")]),t._v(" "),_("p",[_("code",[t._v("语法")]),t._v("："),_("code",[t._v("git reset --mixed [<commit-id>/<HEAD~n>]")])]),t._v(" "),_("p",[_("code",[t._v("命令")]),t._v(": "),_("code",[t._v("git reset --mixed HEAD~1")])]),t._v(" "),_("p",[t._v("已变更的文件都未添加到暂存区，撤销了 commit 和 add 的操作。")]),t._v(" "),_("h4",{attrs:{id:"本地提交了错误的文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本地提交了错误的文件"}},[t._v("#")]),t._v(" 本地提交了错误的文件")]),t._v(" "),_("p",[t._v("本地将完全错误的，本不应提交的内容提交到了仓库，需要进行撤销，可以使用--hard 参数")]),t._v(" "),_("p",[_("code",[t._v("语法")]),t._v("："),_("code",[t._v("git reset --hard [<commit-id>/<HEAD~n>]")])]),t._v(" "),_("p",[_("code",[t._v("命令")]),t._v(": "),_("code",[t._v("git reset --hard HEAD~1")])]),t._v(" "),_("p",[t._v("命令执行完之后，已追踪文件的变更内容都消失了，撤销了 commit 和 add 的操作，同时撤销了本地已经追踪内容的修改；未追踪的内容不会被改变，文件的修改都会被撤销。"),_("code",[t._v("--hard参数需要谨慎使用")])]),t._v(" "),_("h2",{attrs:{id:"撤销本地分支合并"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#撤销本地分支合并"}},[t._v("#")]),t._v(" 撤销本地分支合并")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),_("p",[t._v("待书写")])]),t._v(" "),_("h2",{attrs:{id:"恢复误删的本地分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#恢复误删的本地分支"}},[t._v("#")]),t._v(" 恢复误删的本地分支")]),t._v(" "),_("p",[t._v("本地分支拉取之后，由于疏忽被删除，而且本地的分支并没有被同步到远程分支上，此时想要恢复本地分支。")]),t._v(" "),_("p",[t._v("误删的分支为 feature/del，使用"),_("code",[t._v("git reflog")]),t._v(" 命令可以看到该仓库下的所有历史操作。")]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),_("p",[t._v("待解决")])]),t._v(" "),_("h2",{attrs:{id:"不确定哪个分支有自己的提交"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#不确定哪个分支有自己的提交"}},[t._v("#")]),t._v(" 不确定哪个分支有自己的提交")]),t._v(" "),_("p",[t._v("某个先后合并到了各个分支，但后来发现提交的这个修改是有问题的，需要排查到底哪个分支包含这个提交，然后将其修复掉。")]),t._v(" "),_("p",[t._v("需要先确定有问题的提交的 commit-id。")]),t._v(" "),_("p",[t._v("然后查看本地所有的分支")]),t._v(" "),_("p",[t._v("本地的分支数量非人为控制的，在使用的状态的分支删掉也不合适，分支数量达到一定的程度，一个一个查找也不现实，可以通过以下命令去解决。")]),t._v(" "),_("p",[_("code",[t._v("语法")]),t._v("："),_("code",[t._v("git branch --cantains <commit-id>")])]),t._v(" "),_("p",[t._v("命令执行后可以看到包含该问题提交的分支有哪些，就可以很方便在对应分支上修复内容了。")])])}),[],!1,null,null,null);v.default=e.exports}}]);