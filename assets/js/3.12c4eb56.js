(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{333:function(t,a,s){"use strict";s.r(a);var n=s(334),e=s.n(n);for(var r in n)["default"].indexOf(r)<0&&function(t){s.d(a,t,(function(){return n[t]}))}(r);a.default=e.a},334:function(t,a){},385:function(t,a,s){"use strict";s.d(a,"a",(function(){return n})),s.d(a,"b",(function(){return e}));var n=function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"模板引擎-mustache"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板引擎-mustache"}},[t._v("#")]),t._v(" 模板引擎 mustache")]),t._v(" "),s("ul",[s("li",[t._v("什么是模板引擎")]),t._v(" "),s("li",[t._v("mustache 基本使用")]),t._v(" "),s("li",[t._v("mustache 的底层核心机理")]),t._v(" "),s("li",[t._v("带你手写实现 mustache 库")])]),t._v(" "),s("p",[t._v("模板引擎是将数据变为试图最优雅的解决方案。")]),t._v(" "),s("p",[t._v("历史方法")]),t._v(" "),s("ul",[s("li",[t._v("纯 DOM（最底层）")]),t._v(" "),s("li",[t._v("数组 join 法（字符串，innerHTML）")]),t._v(" "),s("li",[t._v("ES6 的反引号法")]),t._v(" "),s("li",[t._v("模板引擎")])]),t._v(" "),s("h2",{attrs:{id:"mustache-基本使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mustache-基本使用"}},[t._v("#")]),t._v(" mustache 基本使用")]),t._v(" "),s("h3",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("p",[t._v("mustache 是“胡子”的意思，它的嵌入标记"),s("code",[t._v("{{}}")]),t._v("非常像胡子，"),s("code",[t._v("{{}}")]),t._v("的语法也被 Vue 沿用。弱逻辑，不能进行表达式计算")]),t._v(" "),s("p",[t._v("mustache 是最早的模板引擎库，它的底层实现机理是非常有创造性的、轰动性的。")]),t._v(" "),s("ul",[s("li",[t._v("必须要引入 mustache 库，可以在 bootcdn.com 上找到它（既可以 node 使用也可以浏览器使用，它是 umd 格式的，通用的）")]),t._v(" "),s("li",[t._v("循环对象数组 Mustache.render(templateStr,data：含数组);")]),t._v(" "),s("li",[t._v("不循环 Mustache.render(templateStr,data);")]),t._v(" "),s("li",[t._v("循环简单数组（.）")]),t._v(" "),s("li",[t._v("数组的嵌套情况")]),t._v(" "),s("li",[t._v("布尔值-内容是否显示-display：none，但是修改还是不显示，占位")])]),t._v(" "),s("blockquote",[s("p",[t._v("不会当作 js 执行，不会显示在页面的一个容器，存储了这个模板字符串。")]),t._v(" "),s("p",[t._v("document.getElementById('myTemplate')")])]),t._v(" "),s("blockquote",[s("p",[t._v("数据注入就是填进去的意思")])]),t._v(" "),s("h2",{attrs:{id:"mustache-的底层核心机理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mustache-的底层核心机理"}},[t._v("#")]),t._v(" mustache 的底层核心机理")]),t._v(" "),s("p",[t._v("mustache 库不能用简单的正则表达式思路实现。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在较为简单的情况下，可以实现。")])]),t._v(" "),s("li",[s("p",[t._v("但是当情况复杂时，正则表达式的思路肯定就不行了。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("最简单的模板引擎的实现机理，利用的是正则表达式中的 replace（）方法。")]),t._v(" "),s("p",[t._v("replace 方法的第二个参数可以是一个函数，这个函数提供捕获的东西的参数，就是$1")]),t._v(" "),s("p",[t._v("结合 data 对象，即可进行智能的替换")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最简单的模板引擎，可以使用正则表达式")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" templateStr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<h1>我买了一个{{thing}},好{{mood}}</h1>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  thing"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"白菜"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mood"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"激动"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("templateStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" templateStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\{\\{(w+)\\}\\}")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("findStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("$"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("templateStr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("mustache 库的机理")]),t._v(" "),s("p",[t._v("模板字符串=>编译=>tokens=>解析（结合<=数据）=>dom 字符串")]),t._v(" "),s("h2",{attrs:{id:"底层-tokens-思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#底层-tokens-思想"}},[t._v("#")]),t._v(" 底层 tokens 思想")]),t._v(" "),s("h3",{attrs:{id:"什么是-tokens"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-tokens"}},[t._v("#")]),t._v(" 什么是 tokens")]),t._v(" "),s("ul",[s("li",[t._v("tokens 是一个 JS 的嵌套数组，说白了，就是模板字符串的 JS 表示")]),t._v(" "),s("li",[t._v("它是“抽象语法树”、“虚拟节点”等等的开山鼻祖。")])])])},e=[]},386:function(t,a,s){"use strict";s.r(a);var n=s(385),e=s(333);for(var r in e)["default"].indexOf(r)<0&&function(t){s.d(a,t,(function(){return e[t]}))}(r);var p=s(26),v=Object(p.a)(e.default,n.a,n.b,!1,null,null,null);a.default=v.exports}}]);