(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{496:function(n,t,e){"use strict";e.r(t);var l=e(26),r=Object(l.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"apply"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#apply"}},[n._v("#")]),n._v(" Apply")]),n._v(" "),e("p",[e("strong",[n._v("apply 函数的实现步骤：")])]),n._v(" "),e("ul",[e("li",[n._v("判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。")]),n._v(" "),e("li",[n._v("判断传入上下文对象是否存在，如果不存在，则设置为 window 。")]),n._v(" "),e("li",[n._v("将函数作为上下文对象的一个属性。")]),n._v(" "),e("li",[n._v("判断参数值是否传入")]),n._v(" "),e("li",[n._v("使用上下文对象来调用这个方法，并保存返回结果。")]),n._v(" "),e("li",[n._v("删除刚才新增的属性")]),n._v(" "),e("li",[n._v("返回结果")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// apply 函数实现\n\nFunction.prototype.myApply = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== "function") {\n    throw new TypeError("Error");\n  }\n\n  let result = null;\n\n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n\n  // 将函数设为对象的方法\n  context.fn = this;\n\n  // 调用方法\n  if (arguments[1]) {\n    result = context.fn(...arguments[1]);\n  } else {\n    result = context.fn();\n  }\n\n  // 将属性删除\n  delete context.fn;\n\n  return result;\n};\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);