(window.webpackJsonp=window.webpackJsonp||[]).push([[192],{573:function(a,s,t){"use strict";t.r(s);var e=t(26),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"搭建-mysql-集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搭建-mysql-集群"}},[a._v("#")]),a._v(" 搭建 MySQL 集群")]),a._v(" "),t("h2",{attrs:{id:"单节点数据库的弊病"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单节点数据库的弊病"}},[a._v("#")]),a._v(" 单节点数据库的弊病")]),a._v(" "),t("ul",[t("li",[a._v("大型互联网程序用户群体庞大，所以架构必须要特殊设计")]),a._v(" "),t("li",[a._v("单节点的数据库无法满足性能上的要求")]),a._v(" "),t("li",[a._v("单节点的数据库没有冗余设计，无法满足高可用")])]),a._v(" "),t("p",[a._v("如：高校教务系统查询考试成绩，很多人同时查询数据库")]),a._v(" "),t("h2",{attrs:{id:"单节点-mysql-的性能瓶颈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单节点-mysql-的性能瓶颈"}},[a._v("#")]),a._v(" 单节点 MySQL 的性能瓶颈")]),a._v(" "),t("ul",[t("li",[a._v("2016 年春节微信红包巨大业务量，数据库承受巨大负载")]),a._v(" "),t("li",[a._v("共 142 亿个红包，2900 万红包照片，业务增加 75%，76 万红包/秒，5.16 亿人，支付峰值 20.8 万/秒")])]),a._v(" "),t("h2",{attrs:{id:"mysql-集群方案介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql-集群方案介绍"}},[a._v("#")]),a._v(" MySQL 集群方案介绍")]),a._v(" "),t("p",[a._v("Replication")]),a._v(" "),t("ul",[t("li",[a._v("速度快 日志")]),a._v(" "),t("li",[a._v("弱一致性 新闻")]),a._v(" "),t("li",[a._v("低价值 帖子")])]),a._v(" "),t("p",[a._v("PXC")]),a._v(" "),t("ul",[t("li",[a._v("速度慢 订单")]),a._v(" "),t("li",[a._v("强一致性 账户")]),a._v(" "),t("li",[a._v("高价值 财务")])]),a._v(" "),t("p",[a._v("PXC 原理\nPercona XtraDB Cluster（下文简称 PXC 集群）提供了 MySQL 高可用的一种实现方法。PXC 集群以节点组成（推荐至少 3 节点，便于故障恢复，后面会讨论两节点的情况），每个节点都是基于常规的 MySQL/Percona Server，意味着你可以从集群中分离出某节点单独使用。集群中每个节点都包含完整的数据。")]),a._v(" "),t("ul",[t("li",[a._v("PXC（PerCona XtraDB Cluster）基于 PXC mysql(Galera) 每一个 percona 都是可读写的")]),a._v(" "),t("li",[a._v("建议 PXC 使用 PerconaServer(MySQL 改进版，性能提升很大)")])]),a._v(" "),t("p",[a._v("PXC 方案与 Replication 方案的对比")]),a._v(" "),t("ul",[t("li",[a._v("数据同步是双向的，任何一个 MySQL 节点上都是可以同时读写数据的")]),a._v(" "),t("li",[a._v("Replication 是单向的，负责写入的节点叫 Master，Slave 是读，不是每一个节点都是可以同步写入的")])]),a._v(" "),t("p",[a._v("PXC 的数据强一致性")]),a._v(" "),t("ul",[t("li",[a._v("同步复制，事务在所有集群节点要么同时提交，要么不提交")]),a._v(" "),t("li",[a._v("Replication 采用异步复制，无法保证数据的一致性")])]),a._v(" "),t("p",[a._v("异步复制无法保证数据一致性的坏处：如在淘宝下单且支付完成，但是却找不到订单")]),a._v(" "),t("h2",{attrs:{id:"创建-mysql-集群"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建-mysql-集群"}},[a._v("#")]),a._v(" 创建 MySQL 集群")]),a._v(" "),t("p",[a._v("踩坑总结：")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("拉镜像不要拉最新的，不然可能会出现容器闪退之类的问题，建议 5.7.20")])]),a._v(" "),t("li",[t("p",[a._v("从节点启动之后闪退")])])]),a._v(" "),t("blockquote",[t("p",[a._v("情况一")]),a._v(" "),t("p",[a._v("一种情况是由于主节点还没有启动，就启动了从节点，那这个时候从节点肯定是闪退的。所以需要先启动主节点，再启动从节点。")]),a._v(" "),t("p",[a._v("情况二")]),a._v(" "),t("p",[a._v("第二种情况，是由于 PXC 在退出的时候会给集群中最后退出的那台打上标记，当集群重新启动的时候需要先启动最后关闭的那台节点机器。但是 docker 中容器启动是没有办法更改指令的，所以需要修改数据卷中 grastate.data 文件，把 safe_to_bootstrap 参数改为 0。PXC 中就是讲最后关闭的节点的 safe_to_bootstrap 标记为 1，需要按照主节点启动。由于 PXC 的公司在制作 Linux 的镜像的时候，默认是不会给子节点退出的 safe_to_bootstrap 配置打上 1 的，所以真正要修改的是主节点的 safe_to_bootstrap，主节点修改为 1，才可以真正的启动，启动之后再去启动从节点。所以建议直接最后关闭主节点")])]),a._v(" "),t("ul",[t("li",[a._v("主节点启动之后闪退")])]),a._v(" "),t("blockquote",[t("p",[a._v("情况一")]),a._v(" "),t("p",[a._v("当主节点突然宕机，从节点都正常运行，这时候主节点不能按照主节点启动。这时候需要删除主节点的容器，检查数据卷上的 safe_to_bootstrap 是否为 0，如果不是则改为 0。然后以从节点的方式创建容器，加入集群。可以使用任何 PXC 节点，然后从节点加入 PXC 集群。")]),a._v(" "),t("p",[a._v("情况二")]),a._v(" "),t("p",[a._v("需要修改主节点的 safe_to_bootstrap 为 1")])]),a._v(" "),t("h3",{attrs:{id:"pxc-集群安装介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pxc-集群安装介绍"}},[a._v("#")]),a._v(" PXC 集群安装介绍")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("可以在 linux 上直接安装")])]),a._v(" "),t("li",[t("p",[a._v("也可以在 Docker 上安装")])]),a._v(" "),t("li",[t("p",[a._v("Docker 的镜像仓库包含了 PXC 数据库的镜像，下载即可")])]),a._v(" "),t("li",[t("p",[a._v("https://hub.docker.com/r/percona/percona-xtradb-cluster/")])])]),a._v(" "),t("h3",{attrs:{id:"安装-pxc-镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-pxc-镜像"}},[a._v("#")]),a._v(" 安装 PXC 镜像")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("docker pull percona/percona-xtradb-cluster:5.7.20\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 本地安装")]),a._v("\ndocker load "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" /home/soft/pxc.tar.gz\n")])])]),t("h3",{attrs:{id:"修改镜像名字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改镜像名字"}},[a._v("#")]),a._v(" 修改镜像名字")]),a._v(" "),t("p",[a._v("docker tag percona-xtradb-cluster pxc\ndocker images\ndocker rmi percona-xtradb-cluster")]),a._v(" "),t("h3",{attrs:{id:"创建内部网路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建内部网路"}},[a._v("#")]),a._v(" 创建内部网路")]),a._v(" "),t("ul",[t("li",[a._v("出于安全考虑，需要给 PXC 集群实例创建 Docker 内部网络")])]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#创建网段,假设创建网段172.18.0.0（默认：172.17.0.0），子网掩码是24位")]),a._v("\n$ docker network create --subnet"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("172.18")]),a._v(".0.0/24 net1\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#查看网段")]),a._v("\n$ docker network inspect net1\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 删除网段，这里不需要删除")]),a._v("\n$ docker network inspect net1\n")])])]),t("p",[a._v("docker network create net1 创建网段 172.18.0.xx")]),a._v(" "),t("ul",[t("li",[a._v("docker network create --subnet=172.18.0.0/24 net1\ndocker network inspect net1 查看网段信息\ndocker network rm net1 删除网段")])]),a._v(" "),t("h3",{attrs:{id:"创建-docker-卷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建-docker-卷"}},[a._v("#")]),a._v(" 创建 Docker 卷")]),a._v(" "),t("p",[a._v("Docker 卷是容器中的 PXC 节点映射数据目录的解決办法")]),a._v(" "),t("ul",[t("li",[a._v("一旦创建出 docker 容器，尽量不要把业务数据存在容器内，因为出问题的话数据可能就找不到了。")]),a._v(" "),t("li",[a._v("可以把业务数据保存在宿主机内，通过映射技术将宿主机上的目录映射到容器内。在运行容器的时候，把业务数据保存在映射目录里，也就是存储到宿主机上面。如果容器出什么问题，可以在创建一个容器，再将目录映射给该容器，则业务数据就导入了。")])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("docker volume create --name v1 创建\ndocker volume create v1")])]),a._v(" "),t("li",[t("p",[a._v("docker inspect v1 查看")])]),a._v(" "),t("li",[t("p",[a._v("docker volume rm v1 删除")])])]),a._v(" "),t("h3",{attrs:{id:"创建-pxc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建-pxc"}},[a._v("#")]),a._v(" 创建 PXC")]),a._v(" "),t("ul",[t("li",[a._v("只需要向 PXC 镜像传入运行参数就能创建出 PXC 容器")])]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3306")]),a._v(":3306\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 数据目录")]),a._v("\n-v v1:/var/lib/mysql\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建出来的数据库实例密码，用名指定的就是root")]),a._v("\n-e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MYSQL_ROOT_PASSWPRD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("abc123456\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建出来的集群的名字")]),a._v("\n-e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CLUSTER_NAME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("PXC\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 数据库节点之间同步用到的密码")]),a._v("\n-e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("XTRABACKUP_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("abc123456\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 最高权--privileged，创建出来的容器名字，使用的内部网段net，内部网段ip址是172.18.0.2")]),a._v("\n--privileged --name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("node1 --net"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("net1 --ip "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("172.18")]),a._v(".0.2\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 镜像的名字")]),a._v("\npxc\n")])])]),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("docker volume create --name v1\ndocker volume create --name v2\ndocker volume create --name v3\ndocker volume create --name v4\ndocker volume create --name v5\n\ndocker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3306")]),a._v(":3306 -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("abc123456 -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CLUSTER_NAME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("PXC -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("XTRABACKUP_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("abc123456 -v v1:/var/lib/mysql --privileged --name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("node1 --net"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("net1 --ip "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("172.18")]),a._v(".0.2 pxc\n\ndocker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -it node1 /bin/sh\n\nGRANT ALL ON *.* TO "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'root'")]),a._v("@"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nflush privileges"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# cluster_join 加入集群和第一个容器的节点进行同步，所以为node1")]),a._v("\ndocker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3307")]),a._v(":3306 -v v2:/var/lib/mysql -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123456")]),a._v(" -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CLUSTER_NAME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("PXC -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("XTRABACKUP_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123456")]),a._v(" -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CLUSTER_JOIN")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("node1 --privileged --name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("node2 --net"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("net1 --ip "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("172.18")]),a._v(".0.3 pxc\n\ndocker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3308")]),a._v(":3306 -v v3:/var/lib/mysql -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123456")]),a._v(" -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CLUSTER_NAME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("PXC -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("XTRABACKUP_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123456")]),a._v(" -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CLUSTER_JOIN")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("node1 --privileged --name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("node3 --net"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("net1 --ip "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("172.18")]),a._v(".0.4 pxc\n\ndocker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3309")]),a._v(":3306 -v v4:/var/lib/mysql -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123456")]),a._v(" -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CLUSTER_NAME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("PXC -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("XTRABACKUP_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123456")]),a._v(" -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CLUSTER_JOIN")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("node1 --privileged --name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("node4 --net"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("net1 --ip "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("172.18")]),a._v(".0.5 pxc\n\ndocker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3310")]),a._v(":3306 -v v5:/var/lib/mysql -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MYSQL_ROOT_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123456")]),a._v(" -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CLUSTER_NAME")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("PXC -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("XTRABACKUP_PASSWORD")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("123456")]),a._v(" -e "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("CLUSTER_JOIN")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("node1 --privileged --name"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("node5 --net"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("net1 --ip "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("172.18")]),a._v(".0.6 pxc\n\n")])])]),t("p",[a._v("注意\n创建第一个容器的 mysql 成功才去创建第二个，耐心等待第一个容器的 mysql 的初始化")]),a._v(" "),t("h2",{attrs:{id:"数据库负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库负载均衡"}},[a._v("#")]),a._v(" 数据库负载均衡")]),a._v(" "),t("h3",{attrs:{id:"数据库负载均衡的必要性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库负载均衡的必要性"}},[a._v("#")]),a._v(" 数据库负载均衡的必要性")]),a._v(" "),t("ul",[t("li",[a._v("虽然搭建了集群，但是不使用数据库负载均衡，单节点处理所有请求，负载高，性能差。")])]),a._v(" "),t("p",[a._v("使用 Haproxy 做负载均衡，请求被均匀分发给每个节点，单节点负载低，性能好。")]),a._v(" "),t("p",[a._v("负载均衡中间件对比")]),a._v(" "),t("ul",[t("li",[a._v("Haproxy")]),a._v(" "),t("li",[a._v("Nginx")]),a._v(" "),t("li",[a._v("Apache")]),a._v(" "),t("li",[a._v("LVS")])]),a._v(" "),t("h3",{attrs:{id:"安装-haproxy-镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-haproxy-镜像"}},[a._v("#")]),a._v(" 安装 haproxy 镜像")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("docker pull haproxy\n")])])]),t("h3",{attrs:{id:"创建-haproxy-配置文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建-haproxy-配置文件"}},[a._v("#")]),a._v(" 创建 Haproxy 配置文件")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 参考 https://zhangge.net/5125.html")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("touch")]),a._v(" /home/soft/haproxy.cfg\n")])])]),t("h3",{attrs:{id:"创建-haproxy-容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建-haproxy-容器"}},[a._v("#")]),a._v(" 创建 Haproxy 容器")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("docker run -it -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4001")]),a._v(":8888 -p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4002")]),a._v(":3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name haproxy --privileged --net"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("net1 haproxy\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# haproxy -f /usr/local/etc/haproxy/haproxy.cfg")]),a._v("\n")])])]),t("h2",{attrs:{id:"负载均衡的高可用方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡的高可用方案"}},[a._v("#")]),a._v(" 负载均衡的高可用方案")]),a._v(" "),t("h2",{attrs:{id:"热备份数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#热备份数据"}},[a._v("#")]),a._v(" 热备份数据")])])}),[],!1,null,null,null);s.default=r.exports}}]);