(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{400:function(t,n,v){"use strict";v.r(n);var _=v(26),a=Object(_.a)({},(function(){var t=this,n=t.$createElement,v=t._self._c||n;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"预处理器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#预处理器"}},[t._v("#")]),t._v(" 预处理器")]),t._v(" "),v("h2",{attrs:{id:"为什么要使用预处理器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用预处理器"}},[t._v("#")]),t._v(" 为什么要使用预处理器？")]),t._v(" "),v("p",[t._v("CSS 自诞生以来，基本语法和核心机制一直没有本质上的变化，它的发展几乎全是表现力层面上的提升。最开始 CSS 在网页中的作用只是辅助性的装饰，轻便易学是最大的需求；然而如今网站的复杂度已经不可同日而语，原生 CSS 已经让开发者力不从心。")]),t._v(" "),v("p",[t._v("当一门语言的能力不足而用户的运行环境又不支持其它选择的时候，这门语言就会沦为 “编译目标” 语言。开发者将选择另一门更高级的语言来进行开发，然后编译到底层语言以便实际运行。")]),t._v(" "),v("p",[t._v("于是，在前端领域，天降大任于斯人也，CSS 预处理器应运而生。而 CSS 这门古老的语言以另一种方式 “重新适应” 了网页开发的需求。")]),t._v(" "),v("h2",{attrs:{id:"预处理器赋予我们的-超能力"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#预处理器赋予我们的-超能力"}},[t._v("#")]),t._v(" 预处理器赋予我们的 “超能力”")]),t._v(" "),v("p",[t._v("简单梳理一下，CSS 预处理器为我们带来了几项重要的能力，由浅入深排列如下。（不用在意你用到了多少，无论深浅，都是获益。）")]),t._v(" "),v("h3",{attrs:{id:"文件切分"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文件切分"}},[t._v("#")]),t._v(" 文件切分")]),t._v(" "),v("p",[t._v("页面越来越复杂，需要加载的 CSS 文件也越来越大，我们有必要把大文件切分开来，否则难以维护。传统的 CSS 文件切分方案基本上就是 CSS 原生的 @import 指令，或在 HTML 中加载多个 CSS 文件，这些方案通常不能满足性能要求。")]),t._v(" "),v("p",[t._v("CSS 预处理器扩展了 @import 指令的能力，通过编译环节将切分后的文件重新合并为一个大文件。这一方面解决了大文件不便维护的问题，另一方面也解决了一堆小文件在加载时的性能问题。")]),t._v(" "),v("h3",{attrs:{id:"模块化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模块化"}},[t._v("#")]),t._v(" 模块化")]),t._v(" "),v("p",[t._v("把文件切分的思路再向前推进一步，就是 “模块化”。一个大的 CSS 文件在合理切分之后，所产生的这些小文件的相互关系应该是一个树形结构。")]),t._v(" "),v("p",[t._v("树形的根结节一般称作 “入口文件”，树形的其它节点一般称作 “模块文件”。入口文件通常会依赖多个模块文件，各个模块文件也可能会依赖其它更末端的模块，从而构成整个树形。")]),t._v(" "),v("p",[t._v("以下是一个简单的示例：")]),t._v(" "),v("p",[t._v("entry.styl\n├─ base.styl\n│ ├─ normalize.styl\n│ └─ reset.styl\n├─ layout.styl\n│ ├─ header.styl\n│ │ └─ nav.syl\n│ └─ footer.styl\n├─ section-foo.styl\n├─ section-bar.styl\n└─ ...\n（入口文件 entry.styl 在编译时会引入所需的模块，生成 entry.css，然后被页面引用。）")]),t._v(" "),v("p",[t._v("如果你用过其它拥有模块机制的编程语言，应该已经深有体会，模块化是一种非常好的代码组织方式，是开发者设计代码结构的重要手段。模块可以很清晰地实现代码的分层、复用和依赖管理，让 CSS 的开发过程也能享受到现代程序开发的便利。")]),t._v(" "),v("h3",{attrs:{id:"选择符嵌套"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#选择符嵌套"}},[t._v("#")]),t._v(" 选择符嵌套")]),t._v(" "),v("p",[t._v("选择符嵌套是文件内部的代码组织方式，它可以让一系列相关的规则呈现出层级关系。在以前，如果要达到这个目的，我们只能这样写：")]),t._v(" "),v("p",[t._v(".nav {margin: auto /_ 水平居中 "),v("em",[t._v("/; width: 1000px; color: #333;}\n.nav li {float: left /")]),t._v(" 水平排列 _/; width: 100px;}\n.nav li a {display: block; text-decoration: none;}")]),t._v(" "),v("p",[t._v("这种写法需要我们手工维护缩进关系，当上级选择符发生变化时，所有相关的下级选择符都要修改；此外，把每条规则写成一行也不易阅读，为单条声明写注释也很尴尬（只能插在声明之间了）。")]),t._v(" "),v("p",[t._v("在 CSS 预处理语言中，嵌套语法可以很容易地表达出规则之间的层级关系，为单条声明写注释也很清晰易读：")]),t._v(" "),v("p",[t._v(".nav\nmargin: auto // 水平居中\nwidth: 1000px\ncolor: #333\nli\nfloat: left // 水平排列\nwidth: 100px\na\ndisplay: block\ntext-decoration: none")]),t._v(" "),v("h3",{attrs:{id:"变量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),v("p",[t._v("在变更出现之前，CSS 中的所有属性值都是 “幻数”。你不知道这个值是怎么来的、它的什么样的意义。有了变量之后，我们就可以给这些 “幻数” 起个名字了，便于记忆、阅读和理解。")]),t._v(" "),v("p",[t._v("接下来我们会发现，当某个特定的值在多处用到时，变量就是一种简单而有效的抽象方式，可以把这种重复消灭掉，让你的代码更加 DRY。")]),t._v(" "),v("p",[t._v("我们来比较一下以下两段代码：")]),t._v(" "),v("p",[t._v("/_ 原生 CSS 代码 _/\nstrong {\ncolor: #ff4466;\nfont-weight: bold;\n}")]),t._v(" "),v("p",[t._v("/_ ... _/")]),t._v(" "),v("p",[t._v(".notice {\ncolor: #ff4466;\n}\n// 用 Stylus 来写\n$color-primary = #ff4466")]),t._v(" "),v("p",[t._v("strong\ncolor: $color-primary\nfont-weight: bold")]),t._v(" "),v("p",[t._v("/_ ... _/")]),t._v(" "),v("p",[t._v(".notice\ncolor: $color-primary\n你可能已经意识到了，变量让开发者更容易实现网站视觉风格的统一，也让 “换肤” 这样的需求变得更加轻松易行。")]),t._v(" "),v("h3",{attrs:{id:"运算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#运算"}},[t._v("#")]),t._v(" 运算")]),t._v(" "),v("p",[t._v("光有变量还是不够的，我们还需要有运算。如果说变量让值有了意义，那么运算则可以让值和值建立关联。有些属性的值其实跟其它属性的值是紧密相关的，CSS 语法无法表达这层关系；而在预处理语言中，我们可以用变量和表达式来呈现这种关系。")]),t._v(" "),v("p",[t._v("举个例子，我们需要让一个容器最多只显示三行文字，在以前我们通常是这样写的：")]),t._v(" "),v("p",[t._v(".wrapper {\noverflow-y: hidden;\nline-height: 1.5;\nmax-height: 4.5em; /_ = 1.5 x 3 _/\n}\n大家可以发现，我们只能用注释来表达 max-height 的值是怎么来的，而且注释中 3 这样的值也是幻数，还需要进一步解释。未来当行高或行数发生变化的时候，max-height 的值和注释中的算式也需要同步更新，维护起来很不方便。")]),t._v(" "),v("p",[t._v("接下来我们用预处理语言来改良一下：")]),t._v(" "),v("p",[t._v(".wrapper\n$max-lines = 3\n$line-height = 1.5")]),t._v(" "),v("p",[t._v("overflow-y: hidden\nline-height: $line-height\nmax-height: unit($line-height * $max-lines, 'em')\n乍一看，代码行数似乎变多了，但代码的意图却更加清楚了——不需要任何注释就把整件事情说清楚了。在后期维护时，只要修改那两个变量就可以了。")]),t._v(" "),v("p",[t._v("值得一提的是，这种写法还带来另一个好处。$line-height 这个变量可以是 .wrapper 自己定义的局部变量（比如上面那段代码），也可以从更上层的作用域获取：")]),t._v(" "),v("p",[t._v("$line-height = 1.5 // 全局统一行高")]),t._v(" "),v("p",[t._v("body\nline-height: $line-height")]),t._v(" "),v("p",[t._v(".wrapper\n$max-lines = 3")]),t._v(" "),v("p",[t._v("max-height: unit($line-height * $max-lines, 'em')\noverflow-y: hidden\n这意味着 .wrapper 可以向祖先继承行高，而不需要为这个 “只显示三行” 的需求把自己的行高写死。有了运算，我们就有能力表达属性与属性之间的关联，它令我们的代码更加灵活、更加 DRY。")]),t._v(" "),v("h3",{attrs:{id:"函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),v("p",[t._v("把常用的运算操作抽象出来，我们就得到了函数。")]),t._v(" "),v("p",[t._v("开发者可以自定义函数，预处理器自己也内置了大量的函数。最常用的内置函数应该就是颜色的运算函数了吧！有了它们，我们甚至都不需要打开 Photoshop 来调色，就可以得到某个颜色的同色系变种了。")]),t._v(" "),v("p",[t._v("举个例子，我们要给一个按钮添加鼠标悬停效果，而最简单的悬停效果就是让按钮的颜色加深一些。我们写出的 CSS 代码可能是这样的：")]),t._v(" "),v("p",[t._v('.button {\npadding: 0px;"> #ff4466;\n}\n.button:hover {\npadding: 0px;"> #f57900;\n}\n我相信即使是最资深的视觉设计师，也很难分清 #ff4466 和 #f57900 这两种颜色到底有什么关联。而如果我们的代码是用预处理语言来写的，那事情就直观多了：')]),t._v(" "),v("p",[t._v(".button\n$color = #ff9833")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v('padding: 0px;">   &:hover\n    color: rgb(73, 73, 73); font-family: Arial, Helvetica, sans-serif; background-color: rgb(244, 237, 227);">此外，预处理器的函数往往还支持默认参数、具名实参、arguments 对象等高级功能，内部还可以设置条件分支，可以满足复杂的逻辑需求。\n')])])]),v("h3",{attrs:{id:"mixin"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mixin"}},[t._v("#")]),t._v(" Mixin")]),t._v(" "),v("p",[t._v("Mixin 是 CSS 预处理器提供的又一项实用功能。Mixin 的形态和用法跟函数十分类似——先定义，然后在需要的地方调用，在调用时可以接受参数。它与函数的不同之处在于，函数用于产生一个值，而 Mixin 的作用是产生一段 CSS 代码。")]),t._v(" "),v("p",[t._v("Mixin 可以产生多条 CSS 规则，也可以只产生一些 CSS 声明。")]),t._v(" "),v("p",[t._v("一般来说，Mixin 可以把 CSS 文件中类似的代码块抽象出来，并给它一个直观的名字。比如 CSS 框架可以把一些常用的代码片断包装为 mixin 备用，在内部按需调用，或暴露给使用者在业务层调用。")]),t._v(" "),v("p",[t._v("举个例子，我们经常会用到 clearfix 来闭合浮动。在原生 CSS 中，如果要避免 clearfix 代码的重复，往往只能先定义好一个 .clearfix 类，然后在 HTML 中挂载到需要的元素身上：")]),t._v(" "),v("p",[t._v("/_ 为 clearfix 定义一个类 _/\n.clearfix {...}\n.clearfix::after {...}")]),t._v(" "),v("div",{staticClass:"clearfix info"},[t._v("...")]),t._v("\n...\n"),v("footer",{staticClass:"clearfix"},[t._v("...")]),t._v("\n把表现层的实现暴露到了结构层，是不是很不爽？而在预处理器中，我们还可以选择另一种重用方式：\n"),v("p",[t._v("// 为 clearfix 定义一个 mixin\nclearfix()\n...\n&::after\n...")]),t._v(" "),v("p",[t._v("// 在需要的元素身上调用\n.info\nclearfix()")]),t._v(" "),v("p",[t._v("footer\nclearfix()")]),t._v(" "),v("h3",{attrs:{id:"工程化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工程化"}},[t._v("#")]),t._v(" 工程化")]),t._v(" "),v("p",[t._v("CSS 预处理语言无法直接运行于浏览器环境，这意味着我们编写的源码需要编译为 CSS 代码之后才能用于网页。这似乎是一个门槛，需要我们付出 “额外” 的成本。")]),t._v(" "),v("p",[t._v("但在目前的大环境下，大多数项目的前端开发流程已经包含了构建环节，比如选择任何一个脚本模块化方案都是需要在部署时走一道打包程序的。所以对大多数团队来说，这个门槛其实已经跨过去一大半了。")]),t._v(" "),v("p",[t._v("而一旦接受了这种设定，我们还可以享受到 “额外” 的福利。在给 CSS 的开发加入编译环节的同时，还可以顺道加入其它构建环节，比如代码校验、代码压缩、代码后处理等等。")]),t._v(" "),v("p",[t._v("“代码后处理” 是指 PostCSS 平台上各类插件所提供的功能，光是 Autoprefixer 这一项就已经值回票价了。我们再也不需要在 CSS 代码中手工添加浏览器前缀了，直接使用标准写法，剩下的事情让工具搞定吧！")])])}),[],!1,null,null,null);n.default=a.exports}}]);