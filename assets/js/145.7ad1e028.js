(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{527:function(v,t,_){"use strict";_.r(t);var a=_(26),s=Object(a.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"ast"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ast"}},[v._v("#")]),v._v(" AST")]),v._v(" "),_("h2",{attrs:{id:"ast-抽象语法树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ast-抽象语法树"}},[v._v("#")]),v._v(" AST 抽象语法树")]),v._v(" "),_("ul",[_("li",[v._v("相关算法储备\n"),_("ul",[_("li",[v._v("指针思想")])])]),v._v(" "),_("li",[v._v("AST 形成算法")]),v._v(" "),_("li",[v._v("手写 AST 编译器")]),v._v(" "),_("li",[v._v("手写文本解析功能")]),v._v(" "),_("li",[v._v("AST 优化")]),v._v(" "),_("li",[v._v("将 AST 生成 h（）函数")])]),v._v(" "),_("p",[v._v("Abstract Syntax Tree")]),v._v(" "),_("p",[v._v("服务于翻译")]),v._v(" "),_("p",[v._v("抽象语法树是什么")]),v._v(" "),_("p",[v._v("抽象语法树和虚拟节点的关系")]),v._v(" "),_("p",[v._v("模板语法=》抽象语法树 AST=》渲染函数（h 函数）=》虚拟节点=》（diff-patch）界面")]),v._v(" "),_("blockquote",[_("p",[v._v("渲染函数它既是 AST 的产物，也是 vnode 的起源")])]),v._v(" "),_("p",[v._v("底层会将模板语法转换为正常的 HTML 语法")]),v._v(" "),_("p",[v._v("直接编译非常困难，这时候就会用抽象语法树 AST，通过抽象语法树进行过渡让编译工作变得简单。")]),v._v(" "),_("p",[v._v("先将模板语法=》抽象语法树=》正常的 HTML 语法")]),v._v(" "),_("p",[v._v("抽象语法树本质上就是一个 JS 对象")]),v._v(" "),_("p",[v._v("Vue 会以字符串的视角来审查代码，解析为 AST")])])}),[],!1,null,null,null);t.default=s.exports}}]);