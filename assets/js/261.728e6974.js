(window.webpackJsonp=window.webpackJsonp||[]).push([[261],{642:function(t,e,v){"use strict";v.r(e);var a=v(26),_=Object(a.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[t._v("#")]),t._v(" 测试")]),t._v(" "),v("p",[t._v("TDD 和单元测试结合使用，测试覆盖率高，安全性低，")]),t._v(" "),v("p",[t._v("BDD 和集成测试结合使用")]),t._v(" "),v("h2",{attrs:{id:"相关概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[t._v("#")]),t._v(" 相关概念")]),t._v(" "),v("h3",{attrs:{id:"单元测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),v("blockquote",[v("p",[t._v("unit 单元测试是指对程序中最小可测试单元进行的测试，前端泛指对一个函数，一个代码块，一个组件的测试")])]),t._v(" "),v("h3",{attrs:{id:"集成测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集成测试"}},[t._v("#")]),t._v(" 集成测试")]),t._v(" "),v("blockquote",[v("p",[t._v("integration 前端泛指将单元代码组合成的一个功能测试，代码集合的测试。集成测试也包括 UI 测试，UI 测试用于确保页面正常渲染")])]),t._v(" "),v("h3",{attrs:{id:"端到端测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#端到端测试"}},[t._v("#")]),t._v(" 端到端测试")]),t._v(" "),v("blockquote",[v("p",[t._v("e2e，打开应用程序模拟输入，检查功能以及界面是否正确。前端泛指人肉去点点输输去测试。这个学名对于前端来说与一些常说的模拟用户测试，冒烟测试差不多一个意思。冒烟测试的意思大概源于计算机的硬件，比如各个零件搭好了，我换某一个零件，换上去通电没有冒烟就证明通过了。如前端一个页面由十块代码组成，你修改了一处，测试整个页面是否完好。")])]),t._v(" "),v("h3",{attrs:{id:"断言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#断言"}},[t._v("#")]),t._v(" 断言")]),t._v(" "),v("blockquote",[v("p",[t._v("比如在写测试用例时，经常需要检查值是否符合某些条件，不符合我们通常会抛出 throw error，那程序就断了，无法继续，这种就测试失败了。单元测试中一般必须使用断言，它可以直接定位到报错位置。")])]),t._v(" "),v("h3",{attrs:{id:"白盒测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#白盒测试"}},[t._v("#")]),t._v(" 白盒测试")]),t._v(" "),v("blockquote",[v("p",[t._v("是基于代码本身的测试，一般指对代码逻辑结构的测试。")])]),t._v(" "),v("h3",{attrs:{id:"黑盒测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#黑盒测试"}},[t._v("#")]),t._v(" 黑盒测试")]),t._v(" "),v("blockquote",[v("p",[t._v("一般也被称为功能测试，黑盒测试要求测试人员将程序看作一个整体，不考虑其内部结构和特性，只是按照期望验证程序是否能正常工作")])]),t._v(" "),v("h3",{attrs:{id:"沙盒测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#沙盒测试"}},[t._v("#")]),t._v(" 沙盒测试")]),t._v(" "),v("blockquote",[v("p",[t._v("沙盒是在受限的安全环境中运行应用程序的一种做法，这种做法是要限制授予应用程序的代码访问权限。前端泛指通信协议的限制居多，协议族就几种，如 HTTP 等，你要在人家规定的协议下通信，这种就属于沙盒。沙盒环境又称测试环境和开发环境，是提供给开发者开发和测试用的环境。在该环境中应用功能没有任何限制，但是测试将会受限，在新开发的网站未上线时，我们通常修改电脑中的 host 文件来访问某一域名。")])]),t._v(" "),v("h3",{attrs:{id:"tdd"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tdd"}},[t._v("#")]),t._v(" TDD")]),t._v(" "),v("blockquote",[v("p",[t._v("测试驱动开发（Test - Driven - Development），开发某一功能代码之前，先编写单元测试用例代码。（一般都是单元测试，白盒测试）")])]),t._v(" "),v("h3",{attrs:{id:"bdd"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#bdd"}},[t._v("#")]),t._v(" BDD")]),t._v(" "),v("blockquote",[v("p",[t._v("行为驱动开发（Behavior - Driven - Development），大家讨论定需求开发业务代码，然后开发根据用户行为负责编写对应的测试代码（一般都是集成测试，黑盒测试）")])]),t._v(" "),v("h3",{attrs:{id:"ui-测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ui-测试"}},[t._v("#")]),t._v(" UI 测试")]),t._v(" "),v("blockquote",[v("p",[t._v("一般常用两种方式")]),t._v(" "),v("p",[t._v("像素对比：开发截个页面的截图（参照图），测试脚本执行截图代码（对比图），两图像素自动进行对比，如果每个像素都一样，那么测试通过")]),t._v(" "),v("p",[t._v("快照：这里的快照不是截图，是将页面渲染后的 DOM 结构生成一个序列化的文本（参照文本），下次再次生成一个序列化的 DOM 文本（对比文本）。如果内容完全一样，那么测试通过。做快照测试，必须保证多次测试输出快照总是一致的，然而在 react 中 model 经常变化，这时就要用 mock 模拟函数返回固定数据确保 model 不变")])]),t._v(" "),v("h2",{attrs:{id:"常见工具"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见工具"}},[t._v("#")]),t._v(" 常见工具")]),t._v(" "),v("blockquote",[v("p",[t._v("单元测试："),v("strong",[t._v("Jest")]),t._v("、mocha、jasmine、Karma……")]),t._v(" "),v("p",[t._v("集成测试：casperJS、PhantomJS……")]),t._v(" "),v("p",[t._v("端对端测试："),v("strong",[t._v("Puppeteer")]),t._v("、"),v("strong",[t._v("Nightmare")]),t._v("、Selenium、Appium、Protractor、Zombie.js、Cypress……")]),t._v(" "),v("p",[t._v("断言库：Chai、should……")])]),t._v(" "),v("p",[t._v("单元测试推荐 "),v("strong",[t._v("Jest")]),t._v("，集成测试推荐"),v("strong",[t._v("Puppeteer")])]),t._v(" "),v("p",[t._v("像 mocha 这种没有 IDE 集成，一般常要配合 Chai 等库一起使用")]),t._v(" "),v("h2",{attrs:{id:"其他库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#其他库"}},[t._v("#")]),t._v(" 其他库")]),t._v(" "),v("ul",[v("li",[t._v("Vue Test Utils")]),t._v(" "),v("li",[v("a",{attrs:{href:"https://jestjs.io/zh-Hans",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jest"),v("OutboundLink")],1)]),t._v(" "),v("li",[t._v("ava")]),t._v(" "),v("li",[t._v("Sinon.JS")]),t._v(" "),v("li",[t._v("expect")]),t._v(" "),v("li",[t._v("Mock.js")])]),t._v(" "),v("h2",{attrs:{id:"接口测试工具"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#接口测试工具"}},[t._v("#")]),t._v(" 接口测试工具")]),t._v(" "),v("ul",[v("li",[t._v("Postman")]),t._v(" "),v("li",[t._v("ApiPost")])]),t._v(" "),v("h2",{attrs:{id:"相关工具介绍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相关工具介绍"}},[t._v("#")]),t._v(" 相关工具介绍")]),t._v(" "),v("h3",{attrs:{id:"jest"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jest"}},[t._v("#")]),t._v(" Jest")]),t._v(" "),v("p",[v("strong",[t._v("Jest")]),t._v("：Jest 是 Facebook 推出的一款测试工具。")]),t._v(" "),v("p",[v("strong",[t._v("优点：")])]),t._v(" "),v("blockquote",[v("ul",[v("li",[t._v("性能、功能、易用性")]),t._v(" "),v("li",[t._v("速度快 + 监控模式：比如写了 A\\B 两个自动化测试脚本，会都进行测试，如果改了 A，下次就只会测 A")]),t._v(" "),v("li",[t._v("API 简单：少，支持中文")]),t._v(" "),v("li",[t._v("易配置：Jest 的配置文件简单配置一下就可用")]),t._v(" "),v("li",[t._v("隔离性好：代码隔离执行，更精准")]),t._v(" "),v("li",[t._v("快照：针对一些不重要的测试用例可以快速略过")]),t._v(" "),v("li",[t._v("多项目并行：react/vue 等可与 node 同时进行测试")]),t._v(" "),v("li",[t._v("覆盖率：一行命令生成代码报告")]),t._v(" "),v("li",[t._v("Mock：丰富")]),t._v(" "),v("li",[t._v("兼容性：BABEL、TS、Node、React、Vue、Angular")])])]),t._v(" "),v("p",[v("strong",[t._v("提供了很多 API 都很方便，如模拟请求，如模拟定时器：")])]),t._v(" "),v("blockquote",[v("ul",[v("li",[t._v("jest.useFakeTimers() 声明在当前测试文件中使用模拟定时器，声明后，可以直接用 expect(setTimeout).toHaveBeenCalledTimes(1)判断定时器调用的次数")]),t._v(" "),v("li",[t._v("jest.runAllTimers() 立即执行所有定时器")]),t._v(" "),v("li",[t._v("jest.runOnlyPendingTimers() 立即执行挂起的定时器")]),t._v(" "),v("li",[t._v("jest.advanceTimersByTime(msToRun) 提前 msToTun 毫秒执行定时器")])])]),t._v(" "),v("h3",{attrs:{id:"puppeteer"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#puppeteer"}},[t._v("#")]),t._v(" Puppeteer")]),t._v(" "),v("p",[t._v("Puppeteer 是 chrome 推出的一款浏览器自动化工具，它只能进行浏览器的自动化，本身并不具有测试功能（断言，生成测试报告等）")]),t._v(" "),v("p",[t._v("优点：")]),t._v(" "),v("blockquote",[v("ul",[v("li",[t._v("生成页面屏幕截图或 pdf")]),t._v(" "),v("li",[t._v("自动提交表单，做 UI 测试、模拟键盘输入、鼠标操作等")]),t._v(" "),v("li",[t._v("创建一个最新的自动化测试环境，用最新的 JavaScript 和浏览器功能，直接在最新的 chrome 中做测试")]),t._v(" "),v("li",[t._v("捕获你网站的时间线跟踪，以帮助诊断性能问题")])])])])}),[],!1,null,null,null);e.default=_.exports}}]);